<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Jojo's Exceptions</title><link>https://exception.blog/posts/</link><description>Recent content in Posts on Jojo's Exceptions</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 18 Dec 2021 23:51:11 -0300</lastBuildDate><atom:link href="https://exception.blog/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Code injections e uns modding em um TD</title><link>https://exception.blog/posts/code-injection-e-zueira-no-td/</link><pubDate>Sat, 18 Dec 2021 23:51:11 -0300</pubDate><guid>https://exception.blog/posts/code-injection-e-zueira-no-td/</guid><description>Sou um fã de jogos do tipo tower defense desde criança, e sempre curti ownar um ou outro para conseguir chegar em waves ridiculamente altas, ou só pelo memento mori que em determinado ponto, ainda que tenha um modding pesado no game, ainda acabo perdendo para waves que literalmente fazem meu computador dizer adeus a toda sua heap.
O moddado da vez Escolher um TD (caso você não conheça, é o que significa tower defense, lembra de todos aqueles jogos que terminam em TD e você nunca entendeu o motivo, agora sabe!</description><content>&lt;p>Sou um fã de jogos do tipo &lt;em>tower defense&lt;/em> desde criança, e sempre curti ownar um ou outro para conseguir chegar em &lt;em>waves&lt;/em> ridiculamente altas, ou só pelo &lt;em>memento mori&lt;/em> que em determinado ponto, ainda que tenha um modding pesado no game, ainda acabo perdendo para &lt;em>waves&lt;/em> que literalmente fazem meu computador dizer adeus a toda sua &lt;em>heap&lt;/em>.&lt;/p>
&lt;h1 id="o-moddado-da-vez">O &lt;em>moddado&lt;/em> da vez&lt;/h1>
&lt;p>Escolher um TD (caso você não conheça, é o que significa &lt;em>tower defense&lt;/em>, lembra de todos aqueles jogos que terminam em TD e você nunca entendeu o motivo, agora sabe!) de qualidade hoje em dia é muito difícil, para minha tristeza e de diversos jogadores mais saudosistas, esse é um dos gêneros de jogos que estão totalmente sem popularidade, ou na maioria das vezes é encarado somente como um &lt;em>minigame&lt;/em> chato dentro de algum jogo maior.&lt;/p>
&lt;p>Sem sombra de dúvidas o GOAT dos TDs sempre vai ser os primórdios de Warcraft 2 (esse não tinha algo dedicado ao &lt;em>Element&lt;/em>, mas tinha umas paradas doidas) e Warcraft 3, que efetivamente marcou o nome &lt;em>Element&lt;/em>, com os mapas montados para serem jogados como TD, perdi facilmente centenas de horas da minha infância e adolescência neles (atualmente não perco mais tempo neles, considero investimento). Felizmente no mundo estranho em que vivemos atualmente, ainda disponhamos de um bom lançamento para somar na cena de jogos TD: A continuação de &lt;em>Element TD&lt;/em>, com um título para lá de óbvio, &lt;em>Element TD 2&lt;/em>.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Nota&lt;/strong>: O jogo utiliza Unity, e também o famoso (e chato de mais) &lt;em>il2cpp&lt;/em>, que para um jogo sem o devido cuidado na hora de fazer o código intermediário da CLR virar essa gambiarra grotesca de nativo, é relativamente fácil de ser modificado. Ainda sim, sou a favor de moddings mais amigos do binário, isso é, que efetivamente não o altera, então só vamos fuçar em estruturas de memória e alguns padrões de estruturas.&lt;/p>
&lt;p>Utilizar algum framework pronto para &lt;em>modding&lt;/em> em Unity é a melhor alternativa sempre, mas isso envolve chamar o BepInEx e alterar algumas configurações gráficas (já que o &lt;code>il2cpp&lt;/code> não tem o mesmo suporte para fazer o &lt;em>rendering&lt;/em>, por exemplo, de um IMGUI) além da própria estrutura dos arquivos e binários do jogo.&lt;/p>
&lt;/blockquote>
&lt;p>Quem jogou os clássicos mapas dos jogos primordiais, não deve se estranhar em notar uma forte semelhança com o que vemos em &lt;em>Element TD 2&lt;/em>, lançado no dia 2 de Abril desse ano, ao menos oficialmente, sua versão de &lt;em>early access&lt;/em> esteve no ar desde o começo do ano passado. Uma observação interessante, caso você conheça as rinhas de galinha japonesas legalizadas, popularizado sobre o nome Pokémon, vai ter uma facilidade para jogar esse game, por conta das fraquezas de certos elementos contra outros de tipos distintos.&lt;/p>
&lt;h1 id="jogando-na-moral-ou-quase">Jogando na moral (ou quase)&lt;/h1>
&lt;p>Para facilitar um pouco a brincadeira, vou iniciar no modo de sobrevivência na dificuldade normal, para podermos analisar com calma o que nos aguarda dentro do jogo. Não vou fazer nenhuma bizarrice em engenharia reversa, o jogo é &lt;em>indie&lt;/em>, ainda que tenha uma comunidade fiel e antiga por de trás, então caso queira brincar mais afundo no que foi implementado dentro da &lt;em>engine&lt;/em>, compre-o, e ainda por cima ajude a crescer conteúdo por aí.&lt;/p>
&lt;p>O mapa é bem genérico para os padrões de TD, com algumas novidades, além de poder &lt;em>combar&lt;/em> certas skills e torres, o jogo coloca uma dificuldade (que é &lt;strong>muito&lt;/strong> alta, porém artificial) elevada ao revelar certos caminhos até à base em &lt;em>blind spots&lt;/em> no mapa. Ainda sim é bem divertido para quem gosta de uma boa lógica e tem uma mão rápida no teclado, mouse e uma boa memória nas &lt;em>hotkeys&lt;/em>. Enfim, eis uma breve tela do jogo em ação:&lt;/p>
&lt;p>&lt;img src="https://exception.blog/static/image-20211219000854923.png" alt="O jogo em toda sua glória">&lt;/p>
&lt;p>Existem bons elementos na UI que já trazem uma ideia de como funciona o &lt;code>Update()&lt;/code> do game, bem como a ordem das cenas ao serem invocadas e manipuladas para o bem maior do jogador. De cara, podemos enumerar uma série de coisas interessantes que podem ser feitas dentro do jogo:&lt;/p>
&lt;ul>
&lt;li>Patrimônio infinito, ou parametrizável;&lt;/li>
&lt;li>Vidas infinitas;&lt;/li>
&lt;li>Caminho entre os portais;&lt;/li>
&lt;li>Velocidade de locomoção do player;&lt;/li>
&lt;li>&lt;em>Cooldown&lt;/em> de construção, destruição e evolução das torres; e&lt;/li>
&lt;li>Movimento e vida dos &lt;em>minions&lt;/em> dentro do mapa.&lt;/li>
&lt;/ul>
&lt;p>Devem haver outras centenas de coisas que devem ser triviais para serem feitas, mas vamos nos focar em algumas da lista acima. Para começar, vamos dar uma olhada em como o &lt;em>gold&lt;/em> (que é diferente do patrimônio) funciona dentro do game. Existem alguns bons &lt;em>opcodes&lt;/em> que compartilham o acesso a mesma chamada de função dentro do &lt;code>Update()&lt;/code>, entretanto, podemos utilizar esse comportamento de acesso ao endereço de memória que corresponde ao &lt;em>gold&lt;/em> para literalmente mapear qualquer outra estrutura nesse caso específico do &lt;em>Elements TD 2&lt;/em>.&lt;/p>
&lt;p>Mas focando apenas no que ocorre quando uma determinada função ocorre, que é exatamente aquela dentro do &lt;em>loop&lt;/em> do jogo:&lt;/p>
&lt;pre>&lt;code class="language-assembly" data-lang="assembly">movss xmm0,[rax+104]
call GameAssembly.dll+2052F0
cvttss2si eax,xmm0
add rsp,28
ret
&lt;/code>&lt;/pre>&lt;p>Acho que a única &lt;em>capetisse&lt;/em> que tem ai no código do &lt;em>disassembler&lt;/em> é literalmente a instrução &lt;code>cvttss2si&lt;/code> (otimizações de compiladores modernos geram coisas estranhas, mas que teoricamente são performáticas, nesse caso acaba sendo a única opção), no contexto geral, não há muito interesse nessa função, e mexer nela seria uma péssima ideia, caso você esteja curioso sobre a empregabilidade dela, de uma verificada no seu manual favorito de IA64.&lt;/p>
&lt;p>No final das contas, a única coisa que nos interessa é o endereço de memória de &lt;code>rax&lt;/code>, que pode ser utilizado em seu &lt;em>base address&lt;/em> como mapa para diversos ponteiros de memórias, e consequentemente diversas estruturas de memórias bem interessantes do jogo. Ainda sim, para deixar as coisas mais simples, tendo em vista que diversos endereços de memória são visitados pela instrução &lt;code>movss xmm0,[rax+104]&lt;/code>, encontrar efetivamente uma caracteristicas em meio aquelas que acessam o endereço que nos interessa, o &lt;em>gold&lt;/em> própriamente dito possa ser um pé no saco.&lt;/p>
&lt;p>Por fim podemos procurar por &lt;em>opcodes&lt;/em> que definitivamente escrevem no endereço de memória correspondente ao &lt;em>gold&lt;/em>, dessa forma a probabilidade daquela função ser reutilizada em outras estruturas da &lt;em>engine&lt;/em> do jogo é menor - mas perceba que não é nula, mais para frente vamos notar que efetivamente ocorre alguns problemas em outras estruturas de memória quando realizarmos o &lt;em>patch&lt;/em> na memória do jogo -, e por tanto mais tranquila de se alterar sem ter grandes impactos na estabilidade do processo. Que neste caso seria:&lt;/p>
&lt;pre>&lt;code class="language-assembly" data-lang="assembly">; GameAssembly.dll+428264
movss [rcx+104],xmm0
&lt;/code>&lt;/pre>&lt;p>Na instrução acima (perceba que por se tratar de um jogo escrito em Unity, raramente vai aparecer algo fora do módulo &lt;code>GameAssembly.dll&lt;/code>) temos no endereço de memória contido em &lt;code>rcx&lt;/code> acrescido do &lt;em>offset&lt;/em> de 104 é a quantidade total de &lt;em>gold&lt;/em> que temos no momento do jogo. O mesmo &lt;em>offset&lt;/em> se repete na função dentro do &lt;code>Update()&lt;/code>, só que naquele momento, o endereço de memória está em &lt;code>rax&lt;/code>.&lt;/p>
&lt;p>Pois bem, podemos fazer algumas coisas para conseguir substituir o valor de &lt;code>xmm0&lt;/code> para algo ridiculamente grande, porém não é possível simplesmente ter um valor com casas flutuantes e fazer uma atribuição direta ao &lt;code>xmm0&lt;/code> como &lt;code>movss xmm0,(float)9999&lt;/code>. Primeiro torna-se necessário inicializar o endereço de memória que vai representar o quanto haverá de &lt;em>gold&lt;/em> em &lt;code>xmm0&lt;/code> ao ser transportado para o endereço de memória &lt;code>[rcx+104]&lt;/code>:&lt;/p>
&lt;pre>&lt;code class="language-assembly" data-lang="assembly">[ENABLE]
alloc(newmem,2048,&amp;quot;GameAssembly.dll&amp;quot;+428044)
label(returnhere)
label(originalcode)
label(exit)
alloc(_gold,8,&amp;quot;GameAssembly.dll&amp;quot;+428044)
registersymbol(_gold)
_Gold:
dd (float)1234567890
newmem:
movss xmm0,[_Gold]
originalcode:
movss [rcx+00000104],xmm0
exit:
jmp returnhere
&amp;quot;GameAssembly.dll&amp;quot;+428044:
jmp newmem
nop 3
returnhere:
[DISABLE]
dealloc(newmem)
dealloc(_gold)
unregistersymbol(_gold)
&amp;quot;GameAssembly.dll&amp;quot;+428044:
movss [rcx+00000104],xmm0
&lt;/code>&lt;/pre>&lt;p>Como temos &lt;em>gold&lt;/em> sendo representado na memória como &lt;code>float&lt;/code>, precisamos alocar somente o tamanho correspondente em uma nova região de memória próxima da mesma altura da função dentro do módulo &lt;code>GameAssembly.dll&lt;/code>, por tanto alocamos &lt;code>_base&lt;/code> com 8 bytes de tamanho. Após inicializado podemos utilizar o &lt;em>label&lt;/em> &lt;code>newmem&lt;/code>, que representa assim como &lt;code>_base&lt;/code>, um canto na memória que temos todas as permissões possíveis, por tanto podemos sobrescrever o endereço de memória com o novo valor de &lt;code>xmm0&lt;/code>, que é literalmente 1234567890.&lt;/p>
&lt;p>Mas dai começa alguns problemas, quando vendemos uma torre, ou cancelamos o upgrade de uma durante o jogo, é outra função que sobrescreve o endereço de memória, o que implica que o &lt;em>patch&lt;/em> realizado na injeção de código não mais terá efeito, tendo em vista que este é realizado em uma instrução completamente diferente.&lt;/p>
&lt;h1 id="o-começo-do-meio">O começo do meio&lt;/h1>
&lt;p>Assim acontece o problema, diversas instruções atingem o mesmo endereço de memória, todas seguem o mesmo padrão, isto é, compartilham do mesmo &lt;em>offset&lt;/em> de 0x104, todavia em registradores distintos. Uma das formas mais efetivas de contornar esse tipo de problema em diversos jogos, é encontrar a hierarquia de chamada das funções que efetivamente realização operações de escrita no endereço de memória, ou que realize leitura, mas tenha permissão para tal.&lt;/p>
&lt;p>Para isso vamos dar uma olhada no primeiro &lt;em>opcode&lt;/em> que bate no endereço de memória, sendo o &lt;code>GameAssembly.dll+8DBFBA&lt;/code>:&lt;/p>
&lt;pre>&lt;code class="language-assembly" data-lang="assembly">GameAssembly.dll+8DBFB5 - 48 85 C0 ; test rax,rax
GameAssembly.dll+8DBFB8 - 74 16 ; je GameAssembly.dll+8DBFD0
GameAssembly.dll+8DBFBA - F3 0F10 80 04010000 ; movss xmm0,[rax+00000104]
GameAssembly.dll+8DBFC2 - E8 299392FF ; call GameAssembly.dll+2052F0
GameAssembly.dll+8DBFC7 - F3 0F2C C0 ; cvttss2si eax,xmm0
GameAssembly.dll+8DBFCB - 48 83 C4 28 ; add rsp,28 { 40 }
GameAssembly.dll+8DBFCF - C3 ; ret
GameAssembly.dll+8DBFD0 - E8 5B0592FF ; call GameAssembly.dll+1FC530
&lt;/code>&lt;/pre>&lt;p>Ainda que o que nos interesse (&lt;code>movss xmm0,[rax+00000104]&lt;/code>) esteja dentro da condição do resultado de &lt;code>test rax,rax&lt;/code> (que no geral, basicamente testa se &lt;code>rax&lt;/code> == 0), podemos nos arriscar - talvez um pouco de forma otimista - sem analisar o que efetivamente significa esse teste. Se fosse para chutar, diria que é para validar se a cena de jogo efetivamente está carregada e disponível, uma &lt;em>flag&lt;/em> de validação das funções de &lt;em>runtime&lt;/em> da &lt;code>Update()&lt;/code> de aplicar certos bónus no caso de jogar com a opção de juros ativa. No geral, vamos ter um CEA para possibilitar o acesso ao endereço de memória antes de todo mundo da seguinte forma:&lt;/p>
&lt;pre>&lt;code class="language-assembly" data-lang="assembly">[ENABLE]
alloc(newmem,2048,&amp;quot;GameAssembly.dll&amp;quot;+8DBFBA)
label(returnhere)
label(originalcode)
label(exit)
globalalloc(_base,8,&amp;quot;GameAssembly.dll&amp;quot;+8DBFBA)
_base:
dd 0
newmem:
mov [_base],rax
originalcode:
movss xmm0,[rax+00000104]
exit:
jmp returnhere
&amp;quot;GameAssembly.dll&amp;quot;+8DBFBA:
jmp newmem
nop 3
returnhere:
[DISABLE]
dealloc(_base)
unregistersymbol(_base)
dealloc(newmem)
&amp;quot;GameAssembly.dll&amp;quot;+8DBFBA:
movss xmm0,[rax+00000104]
&lt;/code>&lt;/pre>&lt;p>Nessa versão, temos finalmente uma instrução que acessa diretamente ao ponteiro de memória (desde que você lembre-se de acrescer o &lt;em>offset&lt;/em> correto de 0x104), e finalmente possibilitar a edição do valor correspondente ao &lt;em>gold&lt;/em> sem maiores dores de cabeça, e desde que não haja mudanças nesse módulo em especial (o que é improvável, já que o jogo é escrito juntamente da Unity), a injeção de código nessa altura, sempre vai resultar no endereço de memória cujo ponteiro mais o &lt;em>offset&lt;/em> é o &lt;em>gold&lt;/em>.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Nota&lt;/strong>: Se você dissecar adequadamente essa estrutura de memória que vem do endereço base de &lt;code>rax&lt;/code>, vai encontrar tudo aquilo que listei no item anterior, de vida infinita, até a velocidade dos &lt;em>minions&lt;/em>.&lt;/p>
&lt;/blockquote></content></item><item><title>Analisando plguins wordpress em massa</title><link>https://exception.blog/posts/analisando-plugins-wordpress-em-massa/</link><pubDate>Tue, 06 Jul 2021 23:38:32 -0300</pubDate><guid>https://exception.blog/posts/analisando-plugins-wordpress-em-massa/</guid><description>Acredito que a grande maioria do pessoal que procura vulnerabilidades rentáveis dentro do mundo de aplicações web, em algum momento já passou pela stack que o WordPress fornece, seja auditando seu core, ou plugins, sendo este último o foco dessa postagem.
Junto a um simples crawler escrito em C# 9.0 (só não usei os recursos do 10 pois não havia necessidade de delegates), vamos percorrer todos os plugins listáveis na index do site do projeto, e organiza-lo em uma estrutura contendo o próprio .</description><content>&lt;p>Acredito que a grande maioria do pessoal que procura vulnerabilidades rentáveis dentro do mundo de aplicações web, em algum momento já passou pela &lt;em>stack&lt;/em> que o WordPress fornece, seja auditando seu &lt;code>core&lt;/code>, ou plugins, sendo este último o foco dessa postagem.&lt;/p>
&lt;p>Junto a um simples &lt;em>crawler&lt;/em> escrito em C# 9.0 (só não usei os recursos do 10 pois não havia necessidade de &lt;code>delegates&lt;/code>), vamos percorrer todos os &lt;em>plugins&lt;/em> listáveis na &lt;em>index&lt;/em> do site do projeto, e organiza-lo em uma estrutura contendo o próprio &lt;code>.zip&lt;/code> com o código do plugin.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Nota&lt;/strong>: Caso tenha interesse em apenas utilizar o &lt;em>crawler&lt;/em>, verifique-o no código em &lt;em>highlight&lt;/em> logo abaixo.&lt;/p>
&lt;/blockquote>
&lt;h1 id="top-level-program">Top-level program&lt;/h1>
&lt;p>Por não haver a necessidade de termos uma estrutura de programa complexa, vamos utilizar os recursos que o C# 9.0 tem de melhor, em trazer minimalismo na hora de construir uma aplicação de linha de comando: Com &lt;em>top-level programs&lt;/em>. Dentro dessa linguagem, essa caracteristica permite que escrevamos código sem o &lt;em>template&lt;/em> clássico do &lt;code>static void Main()&lt;/code>.&lt;/p>
&lt;p>&lt;img src="https://exception.blog/static/26f475e9f2a847fe0bbf2eab.png" alt="Apresentação do site">&lt;/p>
&lt;p>Para análisar o HTML da página, e não passar raiva ou perder tempo com expressões regulares ou ficar refém de algo como &lt;code>LastIndexOf()&lt;/code> ou &lt;code>IndexOf()&lt;/code>, irei utilizar o &lt;code>AngleParse&lt;/code> como biblioteca para realizar o &lt;em>parsing&lt;/em> da sopa de letras que vamos extrair do site exibido acima. Um ponto de atenção na hora de fazer o &lt;em>crawling&lt;/em>, é justamente se antentar onde será realizado, tendo em vista que a listagem completa dos quase 60 mil plugins não é possível.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Nota&lt;/strong>: Também vamos fazer tudo isso assíncrono e paralelo, utilizando &lt;code>async&lt;/code> e &lt;code>SemaphoreSlim&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;p>Ah, e seguindo a linha das outras postagens, o código vou escrevendo conforme vou conseguindo tempo no meu dia-a-dia, por tanto essa postagem também se remete a essa condição, e pode ser atualizada constantemente conforme meu humor varie. Caso tenha visto alguma coisa que alterou, todo o blog está disponível em meu GitHub no &lt;code>/exception&lt;/code>.&lt;/p>
&lt;p>Sem mais esperneios, vamos ao código-fonte. Esse que talvez não seja muito &lt;em>begginers friendly&lt;/em>, tendo em vista a utilização de recursos bem avançados do C#, porém, ainda contendo esse tipo de código, sua legibilidade é realmente simples:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">using&lt;/span> System;
&lt;span style="color:#66d9ef">using&lt;/span> System.IO;
&lt;span style="color:#66d9ef">using&lt;/span> System.Net;
&lt;span style="color:#66d9ef">using&lt;/span> System.Linq;
&lt;span style="color:#66d9ef">using&lt;/span> System.Net.Http;
&lt;span style="color:#66d9ef">using&lt;/span> System.Threading;
&lt;span style="color:#66d9ef">using&lt;/span> System.Threading.Tasks;
&lt;span style="color:#66d9ef">using&lt;/span> System.Collections.Generic;
&lt;span style="color:#66d9ef">using&lt;/span> System.Collections.Concurrent;
&lt;span style="color:#66d9ef">using&lt;/span> AngleSharp.Html.Dom;
&lt;span style="color:#66d9ef">using&lt;/span> AngleSharp.Html.Parser;
&lt;span style="color:#66d9ef">using&lt;/span> static System.Console;
&lt;span style="color:#66d9ef">var&lt;/span> clientHandler = &lt;span style="color:#66d9ef">new&lt;/span> HttpClientHandler
{
AllowAutoRedirect = &lt;span style="color:#66d9ef">false&lt;/span>,
UseCookies = &lt;span style="color:#66d9ef">true&lt;/span>,
CookieContainer = &lt;span style="color:#66d9ef">new&lt;/span> CookieContainer()
};
&lt;span style="color:#66d9ef">var&lt;/span> client = &lt;span style="color:#66d9ef">new&lt;/span> HttpClient(clientHandler);
&lt;span style="color:#66d9ef">var&lt;/span> parser = &lt;span style="color:#66d9ef">new&lt;/span> HtmlParser();
&lt;span style="color:#66d9ef">var&lt;/span> semaphore = &lt;span style="color:#66d9ef">new&lt;/span> SemaphoreSlim(Environment.ProcessorCount);
&lt;span style="color:#66d9ef">var&lt;/span> downloadList = &lt;span style="color:#66d9ef">new&lt;/span>[]
{
&lt;span style="color:#e6db74">&amp;#34;https://wordpress.org/plugins/browse/popular/&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;https://wordpress.org/plugins/browse/beta/&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;https://wordpress.org/plugins/browse/featured/&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;https://wordpress.org/plugins/browse/blocks/&amp;#34;&lt;/span>
};
WriteLine(&lt;span style="color:#e6db74">&amp;#34;[+] Crawler started with a possible total of {0} thread(s)&amp;#34;&lt;/span>, Environment.ProcessorCount);
&lt;span style="color:#66d9ef">var&lt;/span> pluginsPages = &lt;span style="color:#66d9ef">new&lt;/span> ConcurrentBag&amp;lt;&lt;span style="color:#66d9ef">string&lt;/span>&amp;gt;();
&lt;span style="color:#66d9ef">async&lt;/span> Task GetAllPluginsPagesAsync(&lt;span style="color:#66d9ef">string&lt;/span> target)
{
&lt;span style="color:#66d9ef">await&lt;/span> semaphore.WaitAsync();
&lt;span style="color:#66d9ef">var&lt;/span> response = &lt;span style="color:#66d9ef">await&lt;/span> client.GetAsync(target);
&lt;span style="color:#66d9ef">if&lt;/span> (!response.IsSuccessStatusCode) &lt;span style="color:#66d9ef">return&lt;/span>;
&lt;span style="color:#66d9ef">var&lt;/span> counter = &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;span style="color:#66d9ef">while&lt;/span> (&lt;span style="color:#66d9ef">true&lt;/span>)
{
&lt;span style="color:#66d9ef">var&lt;/span> content = &lt;span style="color:#66d9ef">await&lt;/span> response.Content.ReadAsStringAsync();
&lt;span style="color:#66d9ef">var&lt;/span> soup = &lt;span style="color:#66d9ef">await&lt;/span> parser.ParseDocumentAsync(content);
&lt;span style="color:#66d9ef">var&lt;/span> navs = soup.All
.Where(e =&amp;gt; e.LocalName == &lt;span style="color:#e6db74">&amp;#34;div&amp;#34;&lt;/span> &amp;amp;&amp;amp; e.GetAttribute(&lt;span style="color:#e6db74">&amp;#34;class&amp;#34;&lt;/span>) == &lt;span style="color:#e6db74">&amp;#34;nav-links&amp;#34;&lt;/span>)
.ToList();
&lt;span style="color:#66d9ef">if&lt;/span> (navs.Count == &lt;span style="color:#ae81ff">0&lt;/span>)
{
pluginsPages.Add(content);
&lt;span style="color:#66d9ef">break&lt;/span>;
}
pluginsPages.Add(content);
response = &lt;span style="color:#66d9ef">await&lt;/span> client.GetAsync(target + &lt;span style="color:#e6db74">$&amp;#34;page/{counter}/&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">if&lt;/span> (!response.IsSuccessStatusCode) &lt;span style="color:#66d9ef">break&lt;/span>;
counter += &lt;span style="color:#ae81ff">1&lt;/span>;
}
semaphore.Release();
}
&lt;span style="color:#66d9ef">var&lt;/span> downloadTasks = &lt;span style="color:#66d9ef">new&lt;/span> List&amp;lt;Task&amp;gt;();
downloadList.ToList().ForEach(d =&amp;gt; downloadTasks.Add(GetAllPluginsPagesAsync(d)));
&lt;span style="color:#66d9ef">await&lt;/span> Task.WhenAll(downloadTasks);
WriteLine(&lt;span style="color:#e6db74">&amp;#34;[+] Downloaded {0} page(s) with unique plugins from WordPress&amp;#34;&lt;/span>, pluginsPages.Count);
&lt;span style="color:#66d9ef">var&lt;/span> pluginPages = &lt;span style="color:#66d9ef">new&lt;/span> ConcurrentBag&amp;lt;&lt;span style="color:#66d9ef">string&lt;/span>&amp;gt;();
&lt;span style="color:#66d9ef">async&lt;/span> Task GetPluginPageAsync(&lt;span style="color:#66d9ef">string&lt;/span> page)
{
&lt;span style="color:#66d9ef">await&lt;/span> semaphore.WaitAsync();
&lt;span style="color:#66d9ef">var&lt;/span> soup = &lt;span style="color:#66d9ef">await&lt;/span> parser.ParseDocumentAsync(page);
&lt;span style="color:#66d9ef">var&lt;/span> headers = soup.All
.Where(e =&amp;gt; e.LocalName == &lt;span style="color:#e6db74">&amp;#34;h3&amp;#34;&lt;/span> &amp;amp;&amp;amp; e.GetAttribute(&lt;span style="color:#e6db74">&amp;#34;class&amp;#34;&lt;/span>) == &lt;span style="color:#e6db74">&amp;#34;entry-title&amp;#34;&lt;/span>)
.Select(e =&amp;gt; e.InnerHtml)
.ToList();
&lt;span style="color:#66d9ef">if&lt;/span> (headers.Count &amp;lt;= &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#66d9ef">return&lt;/span>;
headers.ForEach(&lt;span style="color:#66d9ef">async&lt;/span> c =&amp;gt;
{
&lt;span style="color:#66d9ef">var&lt;/span> anchor = &lt;span style="color:#66d9ef">await&lt;/span> parser.ParseDocumentAsync(c);
&lt;span style="color:#66d9ef">if&lt;/span> (anchor.All.FirstOrDefault(e =&amp;gt; e.LocalName == &lt;span style="color:#e6db74">&amp;#34;a&amp;#34;&lt;/span>) &lt;span style="color:#66d9ef">is&lt;/span> not IHtmlAnchorElement href) &lt;span style="color:#66d9ef">return&lt;/span>;
pluginPages.Add(href.Href);
});
semaphore.Release();
}
&lt;span style="color:#66d9ef">var&lt;/span> parserTasks = &lt;span style="color:#66d9ef">new&lt;/span> List&amp;lt;Task&amp;gt;();
pluginsPages.ToList().ForEach(p =&amp;gt; parserTasks.Add(GetPluginPageAsync(p)));
&lt;span style="color:#66d9ef">await&lt;/span> Task.WhenAny(parserTasks);
&lt;span style="color:#66d9ef">var&lt;/span> pluginsPagesUniq = pluginPages.Distinct().ToList();
WriteLine(&lt;span style="color:#e6db74">&amp;#34;[+] Downloaded {0} plugin page(s)&amp;#34;&lt;/span>, pluginsPagesUniq.Count);
&lt;span style="color:#66d9ef">if&lt;/span> (!Directory.Exists(&lt;span style="color:#e6db74">&amp;#34;output&amp;#34;&lt;/span>)) Directory.CreateDirectory(&lt;span style="color:#e6db74">&amp;#34;output&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">async&lt;/span> Task DownloadPluginAsync(&lt;span style="color:#66d9ef">string&lt;/span> href)
{
&lt;span style="color:#66d9ef">await&lt;/span> semaphore.WaitAsync();
&lt;span style="color:#66d9ef">var&lt;/span> response = &lt;span style="color:#66d9ef">await&lt;/span> client.GetAsync(href);
&lt;span style="color:#66d9ef">var&lt;/span> content = &lt;span style="color:#66d9ef">await&lt;/span> response.Content.ReadAsStringAsync();
&lt;span style="color:#66d9ef">var&lt;/span> soup = &lt;span style="color:#66d9ef">await&lt;/span> parser.ParseDocumentAsync(content);
&lt;span style="color:#66d9ef">if&lt;/span> (soup.All.FirstOrDefault(e =&amp;gt; e.LocalName == &lt;span style="color:#e6db74">&amp;#34;a&amp;#34;&lt;/span> &amp;amp;&amp;amp;
e.GetAttribute(&lt;span style="color:#e6db74">&amp;#34;class&amp;#34;&lt;/span>) ==
&lt;span style="color:#e6db74">&amp;#34;plugin-download button download-button button-large&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">is&lt;/span> not IHtmlAnchorElement downloadLink) &lt;span style="color:#66d9ef">return&lt;/span>;
response = &lt;span style="color:#66d9ef">await&lt;/span> client.GetAsync(downloadLink.Href);
&lt;span style="color:#66d9ef">var&lt;/span> streamContent = &lt;span style="color:#66d9ef">await&lt;/span> response.Content.ReadAsStreamAsync();
&lt;span style="color:#66d9ef">var&lt;/span> pluginFileName = downloadLink.Href.Split(&lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>).Last();
WriteLine(&lt;span style="color:#e6db74">&amp;#34;[+] Downloading file {0}...&amp;#34;&lt;/span>, pluginFileName);
&lt;span style="color:#66d9ef">var&lt;/span> path = Path.Combine(&lt;span style="color:#e6db74">&amp;#34;output&amp;#34;&lt;/span>, pluginFileName);
&lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#66d9ef">using&lt;/span> var stream = &lt;span style="color:#66d9ef">new&lt;/span> FileStream(path, FileMode.CreateNew);
streamContent.Seek(&lt;span style="color:#ae81ff">0&lt;/span>, SeekOrigin.Begin);
streamContent.CopyTo(stream);
semaphore.Release();
}
&lt;span style="color:#66d9ef">var&lt;/span> downloadPluginTasks = &lt;span style="color:#66d9ef">new&lt;/span> List&amp;lt;Task&amp;gt;();
pluginsPagesUniq.ForEach(l =&amp;gt; downloadPluginTasks.Add(DownloadPluginAsync(l)));
&lt;span style="color:#66d9ef">await&lt;/span> Task.WhenAll(downloadPluginTasks);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Basicamente, na primeira etapa do código, inicializamos uma lista contendo as URLs de todos os alvos que vamos utilizar para popular a segunda lista concorrente, que é representada pela própria pagína do plugin.&lt;/p>
&lt;p>Na sequência, pegamos essa mesma listagem de páginas, e extraimos somente as URLs para download dos plugins. Por fim, temos individualmente todas as páginas dos plugins para download, e então, realizam-se o tal ato.&lt;/p>
&lt;p>Caso você for realizar o &lt;em>debugging&lt;/em>, em especial na altura da lógica correspondente a lista &lt;code>pluginsPagesUniq&lt;/code>, você pode se perguntar a necessidade de realizar um &lt;code>Distinct()&lt;/code> do conteúdo da lista concorrente, bom, isso acontece pois um plugin pode estar listado em mais de uma página, dai não seria legal ter entidades repetidas no nosso conjunto.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Nota&lt;/strong>: Existem formas muito mais fáceis e inteligentes de se fazer isso, porém, pegar todos os plugins mais famosos dessa forma, é muito mais &lt;em>style&lt;/em> e divertido.&lt;/p>
&lt;/blockquote>
&lt;h1 id="rodando-o-código">Rodando o código&lt;/h1>
&lt;p>Ao executar o código acima (instalando a única depêndencia, que é o &lt;code>AngleSharp&lt;/code>) você terá em menos de dois minutos (caso tiver um processador com no minímo 8 &lt;em>threads&lt;/em>) mais de 1400 plugins baixados no diretório &lt;code>output&lt;/code> à partir do diretório que foi utilizado para compilar e executar o código. Algo nessa vibe:&lt;/p>
&lt;pre>&lt;code>[+] Crawler started with a possible total of 20 thread(s)
[+] Downloaded 76 page(s) with unique plugins from WordPress
[+] Downloaded 1395 plugin page(s)
[+] Downloading file wp-lazy-loading.zip...
[+] Downloading file background-image-cropper.zip...
[+] Downloading file akismet.4.1.10.zip...
[+] Downloading file classic-editor.1.6.1.zip...
[+] Downloading file rollback-update-failure.0.5.3.zip...
[+] Downloading file health-check.1.4.5.zip...
[+] Downloading file wp-jquery-update-test.2.0.0.zip...
...
&lt;/code>&lt;/pre>&lt;p>A sazonalidade da quantidade de plugins disponíveis para download pode variar bastante dependendo de como os usuários do WordPress utilizam os pluginss, mas a aplicação tende a funcionar até que aconteça alguma grande mudança nas telas do próprio site do WordPress.&lt;/p>
&lt;h1 id="e-sobre-análise">E sobre análise?&lt;/h1>
&lt;p>Caso você só esteja buscando uma CVE para chamar de sua, é bem mais fácil buscar nos plugins com poucos downloads ou mais obscuros na comunidade. Agora, se acredita ter o suficiente para contornar a análise que já é realizada pelo WordPress, tanto automaticamente, quanto manualmente, dependendo da popularidade do plugin, sem contar a análise que a própria cena de segurança da informação faz, esse aqui é o caminho.&lt;/p>
&lt;blockquote>
&lt;p>Todavia, o &lt;code>semgrep&lt;/code> cantará de qualquer forma.&lt;/p>
&lt;/blockquote></content></item><item><title>Interagir em enquetes abertas no LinkedIn é uma péssima ideia!</title><link>https://exception.blog/posts/interagir-em-enquetes-no-linkedin-e-uma-pessima-ideia/</link><pubDate>Sun, 14 Mar 2021 15:31:10 -0300</pubDate><guid>https://exception.blog/posts/interagir-em-enquetes-no-linkedin-e-uma-pessima-ideia/</guid><description>Diversas vezes me deparo na rede social voltada para trabalho (uma nota pessoal sobre, politica nacional, tem muito haver com o nosso trabalho), inumeras enquetes no estilo interaja com determinada ação, para exibir qual a sua opção dentre as possíveis enumeradas em determinada postagem, que são um prato cheio para o pessoal que gosta de analisar perfils, ou de inteligência. Atualmente, isso vem se popularizando muito, por conta de cada vez mais atritos entre o Bolsonaro, com o retorno oficial de Lula à cena deplorável da politica brasileira.</description><content>&lt;p>Diversas vezes me deparo na rede social &lt;em>voltada para trabalho&lt;/em> (uma nota pessoal sobre, politica nacional, tem &lt;strong>muito&lt;/strong> haver com o nosso trabalho), inumeras enquetes no estilo interaja com determinada ação, para exibir qual a sua opção dentre as possíveis enumeradas em determinada postagem, que são um prato cheio para o pessoal que gosta de analisar perfils, ou de inteligência. Atualmente, isso vem se popularizando muito, por conta de cada vez mais atritos entre o Bolsonaro, com o retorno oficial de Lula à cena deplorável da politica brasileira.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Nota&lt;/strong>: Não gosto de ambos os possíveis presidenciáveis de 2022, mas assumo que repudio o descaso do atual presidente a cena que vivemos na pandemia, bem como a falta de transparência do presidente rival em entregar mais clareza dos fatos pessoais de seus julgamentos. Mas pela várzea que vivemos, acredito que não preciso explicar minha opinião para essas duas figuras.&lt;/p>
&lt;/blockquote>
&lt;p>Antes de mais nada, acredito que qualquer fluxo de tratamento de dados que possa ser especializado sem muito esforço por uma parte, sempre vai ser uma péssima ação, qualquer tipo de interação com essas entidades. Afinal de contas, a rede da Microsoft já tem acesso a todos os nossos padrões de comportamento, e a única ressalva que temos é as politicas e leis de proteção aos dados pessoais (que parece valer menos caso você for um utilizador chinês na plataforma, ou não for um cidadão de mesma nacionalidade da plataforma, mas esses casos de conflitos de interesses entre ocidente e oriente, bem como os próprios interesses do LinkedIn, fica para outra postagem).&lt;/p>
&lt;p>Como o LinkedIn é uma rede que tende a ser aberta para quem tem vincúlo com a pessoa &lt;code>X&lt;/code> ou &lt;code>Y&lt;/code>, não esperem de mim censurar os nomes e perfils, bem como o resultado dessa análise. Para ficar com o de costume, caso encontrar seus dados aqui na minha análise, e precisar esconde-los daqui, basta abrir uma &lt;em>issue&lt;/em> ou uma &lt;em>pull request&lt;/em> no blog, através de seu repositório no GitHub.&lt;/p>
&lt;h1 id="enfim-coisas-técnicas">Enfim coisas técnicas&lt;/h1>
&lt;p>Fui para o caminho mais rápido possível para isso, poderia ter analisado o aplicativo ou tentado encontrar algo já pronto para essa finalidade, mas acredito que a diversão de trabalhar com escopos de análise de dados em plataformas que não dispõe com clareza formas de interagir com os dados ali presentes, um desafio simples, mas muito produtivo no aspecto de mapear perfils em redes sociais, seja ela do tipo que for.&lt;/p>
&lt;p>Como de praste, minha &lt;em>stack&lt;/em> de desenvolvimento vai ser o C# 9, junto do .NET5 (em breve pretendo mudar o &lt;em>target&lt;/em> para quando a &lt;em>preview&lt;/em> 3 do .NET6 estiver disponível, especialmente para brincar no Apple Silicon, e também explorar mais a MAUI, além de não ter problemas com a RFC do &lt;em>float&lt;/em>). Para o &lt;em>parsing&lt;/em> da sopinha de &lt;em>tags&lt;/em> do HTML, vou tentar uma approach o mais &lt;em>vanilla&lt;/em> possível, utilizando &lt;code>IndexOf()&lt;/code>, &lt;code>Remove()&lt;/code> e funções nativas da linguagem, para garantir uma performance consistente, sem adicionar bibliotecas complexas para uma finalidade muito simples.&lt;/p>
&lt;h3 id="analisando-a-requisição-de-uma-postagem">Analisando a requisição de uma postagem&lt;/h3>
&lt;p>A primeira coisa que vou fazer (estou escrevendo enquanto vou descobrindo a melhor forma de fazer isso acontecer, então caso queira apenas o resultado final, vá direto ao repositório referênciado no final da postagem) é analisar a aba &lt;em>network&lt;/em> do navegador, ao interagir com uma postagem:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">curl &lt;span style="color:#e6db74">&amp;#39;https://www.linkedin.com/voyager/api/feed/reactions?count=10&amp;amp;q=reactionType&amp;amp;start=70&amp;amp;threadUrn=urn:li:activity:XXXXX614171169XXXXX&amp;#39;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> -H &lt;span style="color:#e6db74">&amp;#39;...&amp;#39;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> --compressed
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Realmente esperei que seria algo mais complexo, mas o LinkedIn facilita bastante, já que sua API RESTful fornece o &lt;em>endpoint&lt;/em> &lt;code>reactions&lt;/code> de fácil acesso a qualquer usuário, claro que no cabeçalho da requisiçao, existia minha sessão, que por motivos óbvios, acabei removendo-a para evitar problemas com os amigos &lt;em>h4x05s&lt;/em>.&lt;/p>
&lt;p>Além disso, os parâmetros de paginação, &lt;code>start&lt;/code> e &lt;code>count&lt;/code> vão facilitar bastante na hora de realizar as requisições de fato! Da forma facilitada que estamos vendo, acredito que uma alternativa 100% válida seria utilizar somente ShellScript junto do &lt;code>jq&lt;/code>, acabaria por resolver esse primeiro ponto. Mas como quero fazer algo com um pouco mais de funções, vou prosseguir com a ideia do C#, e pelo visto, nem será necessário quebrar a cabeça com o &lt;em>parsing&lt;/em> de qualquer trecho da página.&lt;/p>
&lt;p>Expondo o &lt;em>dataset&lt;/em> que vou consumir, será &lt;a href="https://www.linkedin.com/posts/wanderson-santos-136a1bb0_e-a%C3%AD-o-que-ser%C3%A1-de-n%C3%B3s-activity-6775961417116983296-2aR0/">essa postagem&lt;/a>.&lt;/p>
&lt;p>Com tantas informações já disponíveis, vamos codificar um pouco! Graças ao &lt;code>record&lt;/code> do C# 9, abstrair esses modelos de dados ficaram muito simples, e extremamente performáticos:&lt;/p>
&lt;p>&lt;img src="https://exception.blog/static/image-20210314164216249.png" alt="A foto do progresso!">&lt;/p>
&lt;p>Evoluindo para um melhor entendimento da resposta vinda da API, que não é tão fácil de entender a primeiro momento, mas depois fica bem tranquilo de entender (existe formas bem mais ficientes de ser implementado o &lt;em>parsing&lt;/em>):&lt;/p>
&lt;p>&lt;img src="https://exception.blog/static/image-20210314174239109.png" alt="Enumerando usuários paginados na requisição">&lt;/p>
&lt;p>Depois de continuar evoluindo o código para respeitar (parcialmente) a paginação, e entendendo melhor como funciona o comportamento dos servidores do LinkedIn, em especial, sobre &lt;em>rate limiting&lt;/em>, foi só uma questão de escrever um código XGH para extrair todo o conteúdo, e indexa-lo em um arquivo &lt;code>.csv&lt;/code> para uma análise mais profunda:&lt;/p>
&lt;p>&lt;img src="https://exception.blog/static/image-20210314200041144.png" alt="O dataset formado">&lt;/p>
&lt;p>Para simpliificar, e não fazer diversas requisições ao &lt;em>backend&lt;/em> do LinkedIn, escolhi aleatóriamente 1064 pessoas daquela postagem. Por fim o código em C# ficou uma bagunça, mas cumpriu seu propósito de forma majestosa, indexando todos esses resultados em apenas alguns segundos - tudo isso pode ser parametrizado através dos parâmetros da própria API da rede social.&lt;/p>
&lt;p>Um ponto de atenção, é sobre os &lt;em>cookies&lt;/em> necessários para estar autenticado, e também, autorizado dentro do LinkedIn:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">var&lt;/span> session = &lt;span style="color:#66d9ef">new&lt;/span> CookieContainer();
session.Add(&lt;span style="color:#66d9ef">new&lt;/span> Cookie(&lt;span style="color:#e6db74">&amp;#34;JSESSIONID&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;...&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;.www.linkedin.com&amp;#34;&lt;/span>));
session.Add(&lt;span style="color:#66d9ef">new&lt;/span> Cookie(&lt;span style="color:#e6db74">&amp;#34;li_at&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;...&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;.www.linkedin.com&amp;#34;&lt;/span>));
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Todos os demais &lt;em>cookies&lt;/em> são apenas &lt;em>trackers&lt;/em> ou caso você utilize um provedor de SSO. Para os &lt;em>headers&lt;/em>, para minha surpresa, só é necessário o seguinte:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">var&lt;/span> reactionsMessage = &lt;span style="color:#66d9ef">new&lt;/span> HttpRequestMessage(HttpMethod.Get, post)
{
Headers =
{
{&lt;span style="color:#e6db74">&amp;#34;csrf-token&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;...&amp;#34;&lt;/span>}
}
};
&lt;/code>&lt;/pre>&lt;/div>&lt;p>E claro, configurar adequadamente seu &lt;code>HttpClient&lt;/code> e &lt;code>HttpClientHandler&lt;/code>. Deixei os &lt;em>cookies&lt;/em> apontados para o objeto &lt;code>session&lt;/code>, do primeiro &lt;em>snippet&lt;/em> de código, dessa forma ficou tudo bem organizado da seguinte forma:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">using&lt;/span> var clientHandler = &lt;span style="color:#66d9ef">new&lt;/span> HttpClientHandler
{
UseCookies = &lt;span style="color:#66d9ef">true&lt;/span>,
AllowAutoRedirect = &lt;span style="color:#66d9ef">false&lt;/span>,
CookieContainer = session
};
&lt;span style="color:#66d9ef">using&lt;/span> var client = &lt;span style="color:#66d9ef">new&lt;/span> HttpClient(clientHandler);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Depois de tudo isso, veio uma parte meia feia, no que se diz respeito as melhores práticas para nomear os tipos dentro do C#, isso acontece nessa versão do .NET5 por conta da falta de suporte da &lt;em>annotation&lt;/em> &lt;code>JsonPropertyName&lt;/code>, de ser utilizada em &lt;code>record&lt;/code> e também em seus construtores, então para simplificar o código, abstrai apenas os elementos que foram importantes para essa análise:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">private&lt;/span> record Paging(&lt;span style="color:#66d9ef">int&lt;/span> start, &lt;span style="color:#66d9ef">int&lt;/span> total, &lt;span style="color:#66d9ef">int&lt;/span> count);
&lt;span style="color:#66d9ef">private&lt;/span> record description(&lt;span style="color:#66d9ef">string&lt;/span> text);
&lt;span style="color:#66d9ef">private&lt;/span> record name(&lt;span style="color:#66d9ef">string&lt;/span> text);
&lt;span style="color:#66d9ef">private&lt;/span> record Element(&lt;span style="color:#66d9ef">string&lt;/span> reactionType, description description, name name);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>De certa forma ficou simples, porém dava para ter feito melhor. Com as limitações da &lt;code>System.Text.Json&lt;/code>, acredito que por enquanto, esse seria o mais minificado que conseguiria chegar por enquanto. Para realizar o &lt;em>parsing&lt;/em> do JSON que é respondido, fiz algo bem simples - mas sentindo muita falta da simplicidade de tratar tipos de forma dinâmica, igual temos na NewtonSoftware, mas como sempre prefiro fazer sem utilizar nada além da &lt;em>std&lt;/em>, acho que está de bom tamanho:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">var&lt;/span> content = &lt;span style="color:#66d9ef">await&lt;/span> response.Content.ReadAsStringAsync();
&lt;span style="color:#66d9ef">var&lt;/span> payload = JsonSerializer.Deserialize&amp;lt;JsonElement&amp;gt;(content);
&lt;span style="color:#66d9ef">var&lt;/span> paging = JsonSerializer.Deserialize&amp;lt;Paging&amp;gt;(payload.GetProperty(&lt;span style="color:#e6db74">&amp;#34;paging&amp;#34;&lt;/span>).GetRawText());
&lt;span style="color:#66d9ef">if&lt;/span> (paging == &lt;span style="color:#66d9ef">null&lt;/span>) &lt;span style="color:#66d9ef">return&lt;/span>;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>E dessa forma seguimos o &lt;em>parsing&lt;/em> para os demais &lt;code>record&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c#" data-lang="c#">&lt;span style="color:#66d9ef">var&lt;/span> elements = JsonSerializer.Deserialize&amp;lt;List&amp;lt;Element&amp;gt;&amp;gt;(payload.GetProperty(&lt;span style="color:#e6db74">&amp;#34;elements&amp;#34;&lt;/span>).GetRawText());
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Na verdade todos eles estão referenciados explicitamente pelo &lt;code>Element&lt;/code>, dessa forma, basta iterar sobre a lista e colher os dados que julgar necessário. No meu caso imprimi na tela, conforme nas primeiras imagens, para ter uma noção de como as coisas estavam funcionando:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c#" data-lang="c#">elements.ForEach(e =&amp;gt;
{
&lt;span style="color:#66d9ef">if&lt;/span> (e == &lt;span style="color:#66d9ef">null&lt;/span>) &lt;span style="color:#66d9ef">return&lt;/span>;
&lt;span style="color:#66d9ef">if&lt;/span> (e.name != &lt;span style="color:#66d9ef">null&lt;/span> &amp;amp;&amp;amp; !&lt;span style="color:#66d9ef">string&lt;/span>.IsNullOrEmpty(e.name.text))
{
Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34; &amp;gt; User: {e.name.text.ToUpperInvariant()}&amp;#34;&lt;/span>);
}
&lt;span style="color:#66d9ef">if&lt;/span> (e.description != &lt;span style="color:#66d9ef">null&lt;/span> &amp;amp;&amp;amp; !&lt;span style="color:#66d9ef">string&lt;/span>.IsNullOrEmpty(e.description.text))
{
Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34; &amp;gt; Role: {e.description.text.ToUpperInvariant()}&amp;#34;&lt;/span>);
}
&lt;span style="color:#66d9ef">if&lt;/span> (e.reactionType != &lt;span style="color:#66d9ef">null&lt;/span> &amp;amp;&amp;amp; !&lt;span style="color:#66d9ef">string&lt;/span>.IsNullOrEmpty(e.reactionType))
{
Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34; &amp;gt; Type: {e.reactionType}&amp;#34;&lt;/span>);
}
});
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ainda que não temos algo dinâmico, as referênciais internas dos &lt;code>record&lt;/code> ainda podem ser traiçoeiras se acessadas diretamente, como tentar navegar diretamente para &lt;code>e.name.text&lt;/code>, que pode resultar em uma referência nula dentro do escopo de execução, por isso temos também a validação de &lt;code>e.name != null&lt;/code>.&lt;/p>
&lt;p>Depois disso tudo, só utilizo um &lt;code>Distinct()&lt;/code> e indexo todo o resultado em um &lt;code>.csv&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">await&lt;/span> File.WriteAllLinesAsync(&lt;span style="color:#e6db74">&amp;#34;result.csv&amp;#34;&lt;/span>, textToWrite.Distinct().ToList());
&lt;/code>&lt;/pre>&lt;/div>&lt;p>E tudo isso vai ter como produto, o que vamos utilizar para analisar de forma mais profunda os dados, de quem gosta mais de &lt;code>X&lt;/code> ou &lt;code>Y&lt;/code>.&lt;/p>
&lt;h1 id="quem-é-quem">Quem é quem?&lt;/h1>
&lt;p>Vamos analisar brevemente os dados produzidos. Para simplificar, realizei a conversão desse &lt;code>.csv&lt;/code> para um &lt;code>.sqlite&lt;/code> (poderia ter utilizado algo mais simples com &lt;code>pandas&lt;/code>) e consumindo os resultados pela própria &lt;em>shell&lt;/em> do &lt;code>sqlite3&lt;/code>:&lt;/p>
&lt;pre>&lt;code class="language-sqlite" data-lang="sqlite">sqlite&amp;gt; .schema
CREATE TABLE CRAW(
&amp;quot;NAME&amp;quot; TEXT,
&amp;quot;ROLE&amp;quot; TEXT,
&amp;quot;REACTION&amp;quot; TEXT
);
sqlite&amp;gt; SELECT COUNT() FROM CRAW;
1064
&lt;/code>&lt;/pre>&lt;p>Para a postagem que utilizei como referência, temos:&lt;/p>
&lt;ul>
&lt;li>À favor do Bolsonaro: Quem possivelmente teve sua reação como sendo &lt;code>LIKE&lt;/code>;&lt;/li>
&lt;li>À favor do Lula: Quem possívelmente teve sua reação como sendo &lt;code>EMPATHY&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>Com isso em pauta, vamos olhar a quantidade de pessoas que votaram em cada uma das figuras políticas:&lt;/p>
&lt;pre>&lt;code class="language-sqlite" data-lang="sqlite">sqlite&amp;gt; SELECT COUNT() FROM CRAW WHERE REACTION = &amp;quot;EMPATHY&amp;quot;;
319
sqlite&amp;gt; SELECT COUNT() FROM CRAW WHERE REACTION = &amp;quot;LIKE&amp;quot;;
668
&lt;/code>&lt;/pre>&lt;p>Nesse &lt;em>dataset&lt;/em> que colhi da postagem, chegamos ao total de 319 votos à favor do Lula, e 668 votos para o Bolsonaro. Porém, da mesma forma que podemos apenas realizar um &lt;code>COUNT()&lt;/code>, também podemos olhar apenas para os nomes de quem possívelmente prefere governo &lt;code>X&lt;/code> ou &lt;code>Y&lt;/code>, começando pelo candidato de direita:&lt;/p>
&lt;pre>&lt;code class="language-sqlite" data-lang="sqlite">sqlite&amp;gt; SELECT NAME FROM CRAW WHERE REACTION = &amp;quot;LIKE&amp;quot; LIMIT 10;
NADINE JUNKES
MATHEUS CHAGAS
BRUNO JARED CRUZ
JOÃO GANDOLFI
URIEL OLIVEIRA BEZERRA
ADONAI DUTRA
CARLOS EVERTON DOS SANTOS GERALDO
JEFFERSON J.
SARA ELAINE LOPES PEREIRA
MÁRCIO ROSA
&lt;/code>&lt;/pre>&lt;p>E por fim, Lula:&lt;/p>
&lt;pre>&lt;code class="language-sqlite" data-lang="sqlite">sqlite&amp;gt; SELECT NAME FROM CRAW WHERE REACTION = &amp;quot;EMPATHY&amp;quot; LIMIT 10;
ANA CECÍLIA MACHADO
GIOVANNA DUARTE ALMEIDA
LUCAS CATTA PRÊTA
SHEILA PATRICIO
DANIEL TOMAZELLI RAMOS
CRISTIANO FERREIRA
SUELLEN CAROLINE
SABRINA BECKER
VINICIUS T.
VICTÓRIA LAPENNA RODRIGUES
&lt;/code>&lt;/pre>&lt;p>Também podemos analisar os cargos de cada um, e correlaciona-los com o possível ideal político base de dada um. Da mesma forma, podemos utilizar essa mesma análise para determinar o cunho político de uma empresa, marca ou qualquer página no LinkedIn que fique atrelada a uma pessoa.&lt;/p>
&lt;h1 id="conclusão">Conclusão&lt;/h1>
&lt;p>Em poucos minutos (na verdade foi um intervalo de algumas horas, domingo é dia de arrumar a casa, e meus gatos conseguiram se superar essa semana), vimos a possibilidade de escrever um &lt;em>crawler&lt;/em> muito simples para análisar uma postagem relacionada a uma &lt;em>poll&lt;/em> baseada em reações, e chegar em cada um dos perfils que reagiram individualmente.&lt;/p>
&lt;p>Lembre-se que fiz isso sem buscar qualquer resultado ou benefício disso, mas sabemos que existem centenas de empresas que fazem diferente. Da mesma forma, imagine a quantidade de empresas que possívelmente te barrou em um processo seletivo, por analisar rapidamente seu perfil com alguma dessas ferramentas, e verificou que seu ideal político, ou seja lá qual for os dados que a empresa estiver analisando, não está de acordo com ela.&lt;/p>
&lt;p>No final do dia, todos nós somos dados, números e métricas. Dentro do LinkedIn, especialmente pelo fato de existir uma concepção ou idéia de que todos somos autênticos (no sentido de não ter uma grande concentração de perfils de identidade incertas, ou &lt;em>fakes&lt;/em> de outras pessoas), isso se torna &lt;strong>muito&lt;/strong> mais perigoso. Então tenha mais cuidado ao interagir com esse tipo de informação, seus dados podem estar nesse momento passando na mão da empresa que você acabou de aplicar.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Nota&lt;/strong>: Ao ver que ainda existem pessoas que carregam políticos de estimação, vejo que 2022 vai ser um ano muito complicado. Também aproveito o momento para repetir: Por mim ambas as figuras presidenciáveis são, no mínimo, ridículas.&lt;/p>
&lt;/blockquote></content></item><item><title>Hackeando apps financeiros para OSINT (e pela zueira): Tudo pelo PIX!</title><link>https://exception.blog/posts/hackeando-apps-financeiros-para-osint/</link><pubDate>Sun, 10 Jan 2021 16:47:21 -0300</pubDate><guid>https://exception.blog/posts/hackeando-apps-financeiros-para-osint/</guid><description>O PIX foi uma das maiores mudanças que tivemos promovidas pelo BACEN (e por outras instituições financeiras ligadas aos fóruns), que vai promover muita agilidade, simplicidade, e o mais importante segurança. Um dos pontos mais perigosos de vender um produto, ou uma feature dele como sendo algo seguro, é que muitas vezes isso pode ser utilizado contra você.
Para não focarmos no PIX, e ir direto ao assunto, deixo como recomendação uma postagem feita pelo mestre Anchises lá no blog do posto Ipiranga, você pode encontra-lá aqui, recomendo que faça a leitura do conteúdo, antes de avançar por aqui.</description><content>&lt;p>O PIX foi uma das maiores mudanças que tivemos promovidas pelo BACEN (e por outras instituições financeiras ligadas aos fóruns), que vai promover muita agilidade, simplicidade, e o mais importante segurança. Um dos pontos mais perigosos de vender um produto, ou uma &lt;em>feature&lt;/em> dele como sendo algo seguro, é que muitas vezes isso pode ser utilizado contra você.&lt;/p>
&lt;p>Para não focarmos no PIX, e ir direto ao assunto, deixo como recomendação uma postagem feita pelo mestre Anchises lá no &lt;em>blog do posto Ipiranga&lt;/em>, você pode encontra-lá &lt;a href="https://anchisesbr.blogspot.com/2020/10/seguranca-aspectos-de-seguranca-do-pix.html">aqui&lt;/a>, recomendo que faça a leitura do conteúdo, antes de avançar por aqui.&lt;/p>
&lt;p>Antes de cairmos em cima do banco, ou &lt;em>fintech&lt;/em> que escolhi para efetuar o &lt;em>bypassing&lt;/em> de todas as funcionalidades de segurança da aplicação - ofuscação de payloads não é bala de prata, uma dica importante - vou trazer um trecho do próprio Anchises da sua postagem em seu blog:&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://www.bcb.gov.br/estabilidadefinanceira/pagamentosinstantaneos">Segundo o Banco Central&lt;/a>, o objetivo é oferecer pagamento instantâneo seja tão fácil, simples, intuitiva e rápida quanto realizar um pagamento com dinheiro em espécie. Os pagadores poderão iniciar pagamentos usando chaves ou apelidos para a identificação da conta transacional como o número do telefone celular, o CPF, o CNPJ ou um endereço de e-mail (que devem ser cadastrados no seu banco), por meio de QR Code (estático ou dinâmico) ou com uso da tecnologia NFC (near-field communication) para pagamentos por aproximação.&lt;/p>
&lt;/blockquote>
&lt;p>É importante notarmos esses itens relacionados a como a chave pode ser formada, bem como as informações que são contidas nela. Sua chave PIX, pode ser seu &lt;strong>telefone celular&lt;/strong>, &lt;strong>CPF&lt;/strong>, &lt;strong>CNPJ&lt;/strong>, &lt;strong>endereço de e-mail&lt;/strong> ou uma chave gerada &amp;ldquo;aleatoriamente&amp;rdquo; e vinculada a sua conta.&lt;/p>
&lt;p>Quando alguém realiza uma transferência de valores utilizando o PIX, temos um &lt;code>whois&lt;/code> de quem está por de trás daquela chave, trazendo informações como &lt;strong>nome completo&lt;/strong>, &lt;strong>CPF mascarado&lt;/strong> (na verdade alguns bancos esqueceram dessa parte para clientes da mesma instituição, como sempre, o OSINT agradece, mas acredito que não deveria funcionar dessa forma 👀, ou muitas vezes vazando o número do documento consultando o comprovante de pagamento, que não trazia esse dado para o cliente &lt;em>mobile&lt;/em>) e o &lt;strong>banco do destinatário&lt;/strong>.&lt;/p>
&lt;p>Alguns cenários que podemos mapear fazendo uma análise dessa superfície de ataque, são relativamente pequenos, como encontrar o nome completo de uma pessoa que cadastrou um e-mail como sua chave. Porém para dentro da cena de OSINT, esse é um recurso muito poderoso, especialmente pelas tratativas das famosas pessoas publicamente expostas, já que agora é possível chegar no banco que um político ou milionário guarda sua grana (e também seus &lt;em>offshores&lt;/em>, caso for uma instituição nacional).&lt;/p>
&lt;p>Outro ponto muito interessante que podemos explorar, além de enumerar massivamente chaves PIX, enriquecendo cada vez mais uma lista de e-mails, ou de &lt;em>phishing&lt;/em>, é utilizar-se da função de transferir R$ 0,01 centavos (durante minhas análises, algumas &lt;em>fintechs&lt;/em> me permitiram inclusive adicionar dinheiro que não existia, tipos fortes são seus amigos, não deixe passar &lt;code>float&lt;/code>, &lt;code>double&lt;/code> e &lt;code>decimal&lt;/code> como a mesma coisa em sua &lt;em>stack&lt;/em>), com o bónus de conter uma mensagem com &lt;strong>qualquer conteúdo&lt;/strong>, e bom, isso é perigoso em diversas formas.&lt;/p>
&lt;blockquote>
&lt;p>Isso inclusive virou meme, e graças a esse meme das mensagens cornas via PIX, que surgiu a maliciosidade nos olhos da galera, para montar campanhas de &lt;em>marketing&lt;/em> totalmente direcionadas, pela bagatela de um centavo a mensagem.&lt;/p>
&lt;/blockquote>
&lt;h1 id="o-escolhido-depois-de-uma-longa-análise-de-outros-candidatos">O escolhido (depois de uma longa análise de outros candidatos)&lt;/h1>
&lt;p>Depois de olhar alguns dos principais meios de pagamento que tinham implementado o PIX, acabei por selecionar uma aplicação Android muito bem escrita para utilizar nos testes (principalmente pois já tinha uma conta aberta lá, que nunca utilizei), foi bom para relembrar muita coisa das magias ocultas que um bom framework de instrumentação pode fazer, nesse caso utilizei o vovô XPOSED, e depois acabei migrando para o Frida já que não precisava trocar nada na ROM padrão do AVD.&lt;/p>
&lt;p>Essa aplicação em especial, me chamou bastante atenção na forma que foi implementado os recursos de segurança, mas um pequeno deslize por parte dos desenvolvedores, permitiram que todas as suas funcionalidades fossem facilmente (na verdade eu levei 5 horas olhando SMALI e umas chamadas malucas do JNI) ignoradas por um famoso &lt;code>try {} catch {}&lt;/code> implementado de forma genérica.&lt;/p>
&lt;p>Como já dizia o ditado, de nada adianta pagar milhões para GuardSquare para deixar seus executáveis devidamente ofuscados, sendo que o &amp;ldquo;feijão com arroz&amp;rdquo; do &lt;em>clean code&lt;/em> não é colocado quando a esteira de desenvolvimento ferve. Na verdade encontrei esse mesmo detalhe em outras aplicações nacionais.&lt;/p>
&lt;p>Nessa mesma aplicação, notei também a falta de sanitização dessa mensagem do PIX, e acabei por escrever um fuzzer para tentar pegar alguma coisa na renderização da mensagem, talvez traga esse item em outra postagem. Enfim, continuando a análise, percebi que o &lt;em>bypass&lt;/em> rolou, graças a forma que essas funções de segurança eram implementadas: Havia uma &lt;em>activity&lt;/em> principal, que era executada antes de todas as outras (no começo parecia uma gambiarra, depois parecia que estava no começo), e quando era feito esse &lt;em>handling&lt;/em> dos estados das telas da aplicação, quando essa principal era instanciada, as verificações de segurança, eram realizadas.&lt;/p>
&lt;p>E devido ao &lt;code>try {} catch {}&lt;/code> do código que tentava carregar essa tela de aviso (sabe aquela famosa &amp;ldquo;&lt;em>por motivos de segurança seu dispositivo Android blá blá blá&lt;/em>&amp;quot;), era pulada uma das exceções possíveis, que era justamente o &lt;em>handle&lt;/em> para a entidade que fazia referência para essa &lt;em>activity&lt;/em> na memória ser nula, caiu para dentro do limbo das exceções genéricas, e o código continua sua vida depois daquilo, então foi literalmente algo similar a isso para contornar esses controles de segurança:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">randomSecurity2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Java&lt;/span>.&lt;span style="color:#a6e22e">use&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;???&amp;#39;&lt;/span>);
&lt;span style="color:#a6e22e">randomSecurity2&lt;/span>.&lt;span style="color:#f92672">???&lt;/span>.&lt;span style="color:#a6e22e">implementation&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> () {
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;a ???() called, returning nothing.&amp;#34;&lt;/span>);
}
&lt;span style="color:#a6e22e">randomSecurity2&lt;/span>.&lt;span style="color:#f92672">???&lt;/span>.&lt;span style="color:#a6e22e">implementation&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> () {
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;a ???() called, returning nothing.&amp;#34;&lt;/span>);
}
&lt;span style="color:#75715e">// ??? quer dizer que escondi os nomes para evitar problemas.
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Demorei bastante para chegar aqui, devido a ofuscação de código do DexGuard, quebrar os decompiladores clássicos dos executáveis Dalvik, colocando caracteres unicode no meio do nome da função, classe, propriedade etc, fazendo que o decompilador, ao tentar montar o pseudocódigo Java, à partir do SMALI, caia em um &lt;em>loop&lt;/em> de exceções. Ainda bem que podemos criar padrões de &lt;em>hooking&lt;/em> baseados nas assinaturas de tipo das funções, e também enumerar uma classe por essas mesmas características em seu construtor.&lt;/p>
&lt;p>À partir daqui, foi só programar uma extensão para meu proxy para conseguir enviar as requisições para o servidor de &lt;em>backend&lt;/em> com a mesma chave que o cliente original utilizaria para criptografar as &lt;em>payloads&lt;/em> enviadas. Depois de todo esse trabalho, comecei a automatizar as requisições para conseguir, finalmente, fazer o &lt;em>fingerprint&lt;/em> de chaves PIX, e também zuar alguns amigos com centenas de transações de um centavo com frases aleatórias do Chuck Norris (caso um dia tiver um domingo tedioso, recomendo utilizar &lt;a href="https://api.chucknorris.io/">essa API&lt;/a> para azucrinar uns amigos).&lt;/p>
&lt;h1 id="shellscript-e-jq-para-começar-a-automação">ShellScript e &lt;code>jq&lt;/code> para começar a automação&lt;/h1>
&lt;p>Depois de fazer todas as muambas necessárias para fazer o &lt;em>script&lt;/em> funcionar, temos essa belezura em ação:&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/YdWoOtm.png" alt="PIXMAP funcinando c:">&lt;/p>
&lt;p>E agora era só passar a chave de alguém, e ser feliz:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">➜ automator ./pixmap.sh --key&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;+5511.......&amp;#34;&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>+&lt;span style="color:#f92672">]&lt;/span> Key +5511......., of type PHONE intel:
&amp;gt; ISPB: &lt;span style="color:#ae81ff">18236120&lt;/span>
&amp;gt; Institution: NU PAGAMENTOS S.A.
&amp;gt; Owner: Jonas Uliana
&amp;gt; Owner Type: PERSONAL
&amp;gt; Document: 000........
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Só substitui meus dados por pontos, assim que alguns bancos responderem adequadamente sobre alguns pontos que notei de bem perigoso na arvore de riscos ao analisar o fluxo transacional do PIX, irei também deixar o &lt;em>script&lt;/em>, e uma ferramenta de OSINT (isso é OSINT? Não sei dizer muito bem) decente de fato para azucrinar seus amigos e enriquecer a lista de phishing da empresa.&lt;/p>
&lt;h1 id="minhas-conclusões">Minhas conclusões&lt;/h1>
&lt;p>Ainda está se popularizando, cada vez mais com maior adoções e popularidade, mas te todos os testes que fiz em diferentes meios de pagamentos (incluindo bancos, &lt;em>fintechs&lt;/em> e tudo mais), é visível que existe muita falta de maturidade dos modelos de risco ao lidar com fluxos fraudulentos ou anómalos dentro do PIX.&lt;/p>
&lt;p>Outro ponto que não sei dizer se é um risco, ou uma regra de negócio à ser seguida do BACEN, é a permissão de uma conta poder pesquisar centenas de milhares de outras chaves PIX de uma só vez. Notei que nenhuma instituição tinha implementado controles de &lt;em>rate limiting&lt;/em> ou similares, diretamente em suas APIs. A propósito, foi bem legal notar diversas dessas empresas utilizando GraphQL, eu particularmente prefiro bastante, e acredito que qualquer um que desenvolva &lt;em>frontend&lt;/em> compartilhe desse mesmo sentimento.&lt;/p>
&lt;p>E sobre bloquear o aceite de mensagens no PIX? Bom, acredito que isso pode ser implementado no meio de pagamento, não quero receber mensagens de ameaça/marketing ou nada do tipo, ainda que isso implique em ganhar alguns centavos. Meus amigos que caíram na minha zueira, fizeram 10 reais cada, mas para totalizar essa grana, tomaram 1000 transações PIX com frases do Chuck Norris.&lt;/p></content></item><item><title>Solucionando problemas de sincronismo de requisições em paralelo com SemaphoreSlim</title><link>https://exception.blog/posts/problemas-com-httpclient-resolvidos/</link><pubDate>Wed, 30 Dec 2020 18:21:14 -0300</pubDate><guid>https://exception.blog/posts/problemas-com-httpclient-resolvidos/</guid><description>Dando um push() no problema Um dos desafios que nem com as técnicas mais sombrias de debugging me ajudaram a entender o que meu contexto de requisições HTTP assíncronos e paralelos estavam retornando uma exceção baseada no cancelamento das referências das instâncias dos vários CancellationToken utilizados para construir o cliente das requisições.
Foi uma discussão bem legal com alguns monstros da CLR e até mesmo do Roslyn, que com uma paciência de Jó, conseguiram ir a fundo na explicação sobre o funcionamento da pilha de rede dentro do .</description><content>&lt;h1 id="dando-um-push-no-problema">Dando um &lt;code>push()&lt;/code> no problema&lt;/h1>
&lt;p>Um dos desafios que nem com as técnicas mais sombrias de &lt;em>debugging&lt;/em> me ajudaram a entender o que meu contexto de requisições HTTP assíncronos e paralelos estavam retornando uma exceção baseada no cancelamento das referências das instâncias dos vários &lt;code>CancellationToken&lt;/code> utilizados para construir o cliente das requisições.&lt;/p>
&lt;p>Foi uma discussão bem legal com alguns monstros da CLR e até mesmo do Roslyn, que com uma paciência de Jó, conseguiram ir a fundo na explicação sobre o funcionamento da pilha de rede dentro do .NET, e também, sobre a abstração que estava consumindo. No geral, as diversas &lt;em>tasks&lt;/em> que havia emitido, que foram passadas para serem aguardadas sua execução até o fim como parâmetro da função &lt;code>WhenAll&lt;/code> lá do binário &lt;code>System.Runtime.dll&lt;/code>.&lt;/p>
&lt;blockquote>
&lt;p>Para não descer muito o nível, e deixar tudo de maneira bem entendível, não vou abranger muito a explicação que absorvi, e focar na resolução desse problema relativamente simples.&lt;/p>
&lt;/blockquote>
&lt;h1 id="nem-sempre-é-tudo-uma-questão-de-alto-nível">Nem sempre é tudo uma questão de alto nível&lt;/h1>
&lt;p>Em contextos de paralelismo com tarefas que consomem muito tempo do processador, ainda que existem outras várias camadas para orquestrarem essas tarefas, desde de o próprio CPU até o sistema operacional e a própria &lt;em>stack&lt;/em> de desenvolvimento, cabe a nós implementarmos controles eficazes na orquestração nas nossas próprias tarefas.&lt;/p>
&lt;p>Especialmente nas linguagens de altíssimo nível, que entregam uma abstração &lt;em>muito abstrata - eu ri por dentro aqui -&lt;/em> do que realmente é uma &lt;em>thread&lt;/em>, devemos ter essa atenção dobrada para não cair em um contexto de cancelamento pois o tempo de resposta da aplicação para o ambiente onde foi delegada sua execução chegar ao limite.&lt;/p>
&lt;p>Nesse cenário do &lt;code>HttpClientHandler&lt;/code> e do &lt;code>HttpClient&lt;/code> isso fica mais fácil de se perceber, mesmo que você implemente um &lt;em>timeout&lt;/em> na casa dos &lt;code>TimeSpam.FromDays(666)&lt;/code>, se o tempo de execução de qualquer uma das funções assíncronas do &lt;code>HttpClient&lt;/code>, como a mais utilizada &lt;code>HttpClient.SendAsync(HttpRequestMessage)&lt;/code>, podem retornar um &lt;em>timeout&lt;/em>, mas não da resposta HTTP do servidor, e sim da sua &lt;code>Task&lt;/code> que está no limbo do atual contexto de processamento.&lt;/p>
&lt;blockquote>
&lt;p>Vai por mim, evite utilizar funções que podem receber uma sobrecarga de uma instância de &lt;code>CancellationToken&lt;/code>, se ela pode trabalhar com os &lt;em>status&lt;/em> provenientes dessa estrutura, algum motivo tem.&lt;/p>
&lt;/blockquote>
&lt;p>Para simplificar o entendimento de todo esse cenário intangível, vamos trazer ao código uma péssima prática de programação (que quase me fez desistir do desenvolvimento do &lt;a href="https://github.com/BizarreNULL/httpdoom/">HttpDoom&lt;/a>) relacionada ao paralelismo e assincronicidade de código:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">using&lt;/span> System;
&lt;span style="color:#66d9ef">using&lt;/span> System.Linq;
&lt;span style="color:#66d9ef">using&lt;/span> System.Net.Http;
&lt;span style="color:#66d9ef">using&lt;/span> System.Threading.Tasks;
&lt;span style="color:#66d9ef">namespace&lt;/span> Exception.Examples
{
&lt;span style="color:#66d9ef">internal&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Program&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task Main()
{
&lt;span style="color:#66d9ef">var&lt;/span> tasks = &lt;span style="color:#66d9ef">await&lt;/span> Task.WhenAll(Enumerable.Range(&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">5000&lt;/span>)
.Select(&lt;span style="color:#ae81ff">_&lt;/span> =&amp;gt; &lt;span style="color:#66d9ef">new&lt;/span> HttpClient().GetAsync(&lt;span style="color:#e6db74">&amp;#34;https://google.com&amp;#34;&lt;/span>)));
tasks
.Where(t =&amp;gt; &lt;span style="color:#66d9ef">true&lt;/span>)
.ToList()
.ForEach(r =&amp;gt; Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;Google answered {r.StatusCode}&amp;#34;&lt;/span>));
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;strong>Nota&lt;/strong>: &lt;em>Top-level programs&lt;/em> ainda tem algumas coisas bem peculiares para tratar inferência dinâmica de tipos e de contextos assíncronos e paralelos no C# 9, então vamos no clássico &lt;em>entrypoint program&lt;/em> mesmo.&lt;/p>
&lt;/blockquote>
&lt;p>Um código bem simples, e que - se liga no &lt;em>plot twist&lt;/em> - funciona perfeitamente bem! O motivo de tudo funcionar como deveria, é que temos implementado somente uma única responsabilidade dentro da função paralela e assíncrona, onde é iniciado 5000 &lt;code>Task&amp;lt;HttpResponseMessage&amp;gt;&lt;/code> que será aguardada logo no seu &lt;em>enclosure&lt;/em> que é justamente a própria &lt;code>Task.WhenAll&lt;/code>, por ser uma expressão LINQ, o código pode ser um pouco difícil de ler, mas nada que alguns minutos de leitura não resolva.&lt;/p>
&lt;p>O problema que estamos tentando criar, acontece quando além dessa única coisa que é feita (&lt;code>return new HttpClient().GetAsync(&amp;quot;https://google.com&amp;quot;))&lt;/code>, na expressão anônima da extensão &lt;code>Select()&lt;/code> lá do LINQ), adicionamos alguma função que freia a execução dessa &lt;em>thread&lt;/em>, por exemplo, escrever na tela informações da requisição conforme são executadas, vamos alterar um pouco o código e adicionar algumas funções que fação operações de IO:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#75715e">// ...
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">await&lt;/span> Task.WhenAll(Enumerable.Range(&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">5000&lt;/span>)
.Select(&lt;span style="color:#66d9ef">async&lt;/span> &lt;span style="color:#ae81ff">_&lt;/span> =&amp;gt;
{
&lt;span style="color:#66d9ef">try&lt;/span>
{
&lt;span style="color:#66d9ef">var&lt;/span> response = &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> HttpClient().GetAsync(&lt;span style="color:#e6db74">&amp;#34;https://google.com&amp;#34;&lt;/span>);
Console.Write(&lt;span style="color:#e6db74">$&amp;#34;Remote {response.RequestMessage?.RequestUri} answered {response.StatusCode}, &amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">var&lt;/span> content = &lt;span style="color:#66d9ef">await&lt;/span> response.Content.ReadAsByteArrayAsync();
Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;with a length of {content.Length} byte(s)&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">return&lt;/span> response;
}
&lt;span style="color:#66d9ef">catch&lt;/span> (System.Exception e)
{
Console.WriteLine(e.InnerException != &lt;span style="color:#66d9ef">null&lt;/span>
? &lt;span style="color:#e6db74">$&amp;#34;Error: {e.InnerException.Message}&amp;#34;&lt;/span>
: &lt;span style="color:#e6db74">$&amp;#34;Error: {e.Message}&amp;#34;&lt;/span>);
}
}));
&lt;span style="color:#75715e">// ...
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Nesse cenário como temos a interação com operações que causam problemas na hora de serem executadas, e nem por realizarem operações de IO com &lt;code>response.Content.ReadAsByteArrayAsync()&lt;/code> mas sim pela escrita na tela usando &lt;code>System.Console&lt;/code>, que causa um &lt;em>lock&lt;/em> e vira uma bagunça, quem estiver disponível, executa essa função.&lt;/p>
&lt;p>Quando você executar esse código (além de receber um belíssimo banimento da Google por realizar milhares de requisições em tão pouco tempo), vai se deparar com algumas exceções de &lt;code>Task&lt;/code> ao invés das instâncias de classes referentes a pilha de rede do .NET, no caso a famosa mensagem &amp;ldquo;&lt;em>The operation was canceled&lt;/em>&amp;rdquo;.&lt;/p>
&lt;p>E justamente quando receber essa resposta, é que os problemas do paralelismo começam a perturbar sua sanidade.&lt;/p>
&lt;h1 id="resolvendo-com-uma-boa-sinalização">Resolvendo com uma boa sinalização&lt;/h1>
&lt;p>Existem diversas APIs que são fornecidas dentro do CLR para sanar os problemas de paralelismo que correspondem a estes erros, podemos realizar a implementação mais simples que conheço, que tem pouquíssimas alterações no código fonte original da aplicação, utilizando &lt;code>SemaphoreSlim&lt;/code> para corrigir esse fiasco.&lt;/p>
&lt;p>Podemos resumir esse elemento de &lt;code>System.Threads&lt;/code> como sendo uma entidade responsável por limitar o número de &lt;em>threads&lt;/em> que podem acessar uma &lt;em>pool&lt;/em> de recursos, que é justamente o que causa &amp;ldquo;&lt;em>The operation was canceled&lt;/em>&amp;rdquo; dentro de uma &lt;code>Task&lt;/code>. Sua implementação é bem simples, e ele receber por padrão um único argumento correspondente a quantidade máxima de &lt;em>threads&lt;/em> que podem ser alocadas para acessar estes recursos:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c#" data-lang="c#">&lt;span style="color:#66d9ef">var&lt;/span> semaphore = &lt;span style="color:#66d9ef">new&lt;/span> SemaphoreSlim(Environment.ProcessorCount);
&lt;span style="color:#66d9ef">await&lt;/span> Task.WhenAll(Enumerable.Range(&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">1000&lt;/span>)
.Select(&lt;span style="color:#66d9ef">async&lt;/span> &lt;span style="color:#ae81ff">_&lt;/span> =&amp;gt;
{
&lt;span style="color:#66d9ef">await&lt;/span> semaphore.WaitAsync();
&lt;span style="color:#66d9ef">try&lt;/span>
{
&lt;span style="color:#66d9ef">var&lt;/span> response = &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> HttpClient().GetAsync(&lt;span style="color:#e6db74">&amp;#34;https://zup.com.br&amp;#34;&lt;/span>);
Console.Write(&lt;span style="color:#e6db74">$&amp;#34;Remote {response.RequestMessage?.RequestUri} answered {response.StatusCode}, &amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">var&lt;/span> content = &lt;span style="color:#66d9ef">await&lt;/span> response.Content.ReadAsByteArrayAsync();
Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;with a length of {content.Length} byte(s)&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">return&lt;/span> response;
}
&lt;span style="color:#66d9ef">catch&lt;/span> (System.Exception e)
{
Console.WriteLine(e.InnerException != &lt;span style="color:#66d9ef">null&lt;/span>
? &lt;span style="color:#e6db74">$&amp;#34;Error: {e.InnerException.Message}&amp;#34;&lt;/span>
: &lt;span style="color:#e6db74">$&amp;#34;Error: {e.Message}&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;
}
&lt;span style="color:#66d9ef">finally&lt;/span>
{
semaphore.Release();
}
}));
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Agora além de podermos controlar o número de &lt;em>threads&lt;/em> que serão utilizados para realizar as requisições, também não vamos ter problemas de concorrência ao tentar processar essa &lt;em>pool&lt;/em> de tarefas alocadas no fluxo de execução da aplicação.&lt;/p></content></item></channel></rss>