[{"content":"O PIX foi uma das maiores mudan√ßas que tivemos promovidas pelo BACEN (e por outras institui√ß√µes financeiras ligadas aos f√≥runs), que vai promover muita agilidade, simplicidade, e o mais importante seguran√ßa. Um dos pontos mais perigosos de vender um produto, ou uma feature dele como sendo algo seguro, √© que muitas vezes isso pode ser utilizado contra voc√™.\nPara n√£o focarmos no PIX, e ir direto ao assunto, deixo como recomenda√ß√£o uma postagem feita pelo mestre Anchises l√° no blog do posto Ipiranga, voc√™ pode encontra-l√° aqui, recomendo que fa√ßa a leitura do conte√∫do, antes de avan√ßar por aqui.\nAntes de cairmos em cima do banco, ou fintech que escolhi para efetuar o bypassing de todas as funcionalidades de seguran√ßa da aplica√ß√£o - ofusca√ß√£o de payloads n√£o √© bala de prata, uma dica importante - vou trazer um trecho do pr√≥prio Anchises da sua postagem em seu blog:\n Segundo o Banco Central, o objetivo √© oferecer pagamento instant√¢neo seja t√£o f√°cil, simples, intuitiva e r√°pida quanto realizar um pagamento com dinheiro em esp√©cie. Os pagadores poder√£o iniciar pagamentos usando chaves ou apelidos para a identifica√ß√£o da conta transacional como o n√∫mero do telefone celular, o CPF, o CNPJ ou um endere√ßo de e-mail (que devem ser cadastrados no seu banco), por meio de QR Code (est√°tico ou din√¢mico) ou com uso da tecnologia NFC (near-field communication) para pagamentos por aproxima√ß√£o.\n √â importante notarmos esses itens relacionados a como a chave pode ser formada, bem como as informa√ß√µes que s√£o contidas nela. Sua chave PIX, pode ser seu telefone celular, CPF, CNPJ, endere√ßo de e-mail ou uma chave gerada \u0026ldquo;aleatoriamente\u0026rdquo; e vinculada a sua conta.\nQuando algu√©m realiza uma transfer√™ncia de valores utilizando o PIX, temos um whois de quem est√° por de tr√°s daquela chave, trazendo informa√ß√µes como nome completo, CPF mascarado (na verdade alguns bancos esqueceram dessa parte para clientes da mesma institui√ß√£o, como sempre, o OSINT agradece, mas acredito que n√£o deveria funcionar dessa forma üëÄ, ou muitas vezes vazando o n√∫mero do documento consultando o comprovante de pagamento, que n√£o trazia esse dado para o cliente mobile) e o banco do destinat√°rio.\nAlguns cen√°rios que podemos mapear fazendo uma an√°lise dessa superf√≠cie de ataque, s√£o relativamente pequenos, como encontrar o nome completo de uma pessoa que cadastrou um e-mail como sua chave. Por√©m para dentro da cena de OSINT, esse √© um recurso muito poderoso, especialmente pelas tratativas das famosas pessoas publicamente expostas, j√° que agora √© poss√≠vel chegar no banco que um pol√≠tico ou milion√°rio guarda sua grana (e tamb√©m seus offshores, caso for uma institui√ß√£o nacional).\nOutro ponto muito interessante que podemos explorar, al√©m de enumerar massivamente chaves PIX, enriquecendo cada vez mais uma lista de e-mails, ou de phishing, √© utilizar-se da fun√ß√£o de transferir R$ 0,01 centavos (durante minhas an√°lises, algumas fintechs me permitiram inclusive adicionar dinheiro que n√£o existia, tipos fortes s√£o seus amigos, n√£o deixe passar float, double e decimal como a mesma coisa em sua stack), com o b√≥nus de conter uma mensagem com qualquer conte√∫do, e bom, isso √© perigoso em diversas formas.\n Isso inclusive virou meme, e gra√ßas a esse meme das mensagens cornas via PIX, que surgiu a maliciosidade nos olhos da galera, para montar campanhas de marketing totalmente direcionadas, pela bagatela de um centavo a mensagem.\n O escolhido (depois de uma longa an√°lise de outros candidatos) Depois de olhar alguns dos principais meios de pagamento que tinham implementado o PIX, acabei por selecionar uma aplica√ß√£o Android muito bem escrita para utilizar nos testes (principalmente pois j√° tinha uma conta aberta l√°, que nunca utilizei), foi bom para relembrar muita coisa das magias ocultas que um bom framework de instrumenta√ß√£o pode fazer, nesse caso utilizei o vov√¥ XPOSED, e depois acabei migrando para o Frida j√° que n√£o precisava trocar nada na ROM padr√£o do AVD.\nEssa aplica√ß√£o em especial, me chamou bastante aten√ß√£o na forma que foi implementado os recursos de seguran√ßa, mas um pequeno deslize por parte dos desenvolvedores, permitiram que todas as suas funcionalidades fossem facilmente (na verdade eu levei 5 horas olhando SMALI e umas chamadas malucas do JNI) ignoradas por um famoso try {} catch {} implementado de forma gen√©rica.\nComo j√° dizia o ditado, de nada adianta pagar milh√µes para GuardSquare para deixar seus execut√°veis devidamente ofuscados, sendo que o \u0026ldquo;feij√£o com arroz\u0026rdquo; do clean code n√£o √© colocado quando a esteira de desenvolvimento ferve. Na verdade encontrei esse mesmo detalhe em outras aplica√ß√µes nacionais.\nNessa mesma aplica√ß√£o, notei tamb√©m a falta de sanitiza√ß√£o dessa mensagem do PIX, e acabei por escrever um fuzzer para tentar pegar alguma coisa na renderiza√ß√£o da mensagem, talvez traga esse item em outra postagem. Enfim, continuando a an√°lise, percebi que o bypass rolou, gra√ßas a forma que essas fun√ß√µes de seguran√ßa eram implementadas: Havia uma activity principal, que era executada antes de todas as outras (no come√ßo parecia uma gambiarra, depois parecia que estava no come√ßo), e quando era feito esse handling dos estados das telas da aplica√ß√£o, quando essa principal era instanciada, as verifica√ß√µes de seguran√ßa, eram realizadas.\nE devido ao try {} catch {} do c√≥digo que tentava carregar essa tela de aviso (sabe aquela famosa \u0026ldquo;por motivos de seguran√ßa seu dispositivo Android bl√° bl√° bl√°\u0026quot;), era pulada uma das exce√ß√µes poss√≠veis, que era justamente o handle para a entidade que fazia refer√™ncia para essa activity na mem√≥ria ser nula, caiu para dentro do limbo das exce√ß√µes gen√©ricas, e o c√≥digo continua sua vida depois daquilo, ent√£o foi literalmente algo similar a isso para contornar esses controles de seguran√ßa:\nvar randomSecurity2 = Java.use(\u0026#39;???\u0026#39;); randomSecurity2.???.implementation = function () { console.log(\u0026#34;a ???() called, returning nothing.\u0026#34;); } randomSecurity2.???.implementation = function () { console.log(\u0026#34;a ???() called, returning nothing.\u0026#34;); } // ??? quer dizer que escondi os nomes para evitar problemas. Demorei bastante para chegar aqui, devido a ofusca√ß√£o de c√≥digo do DexGuard, quebrar os decompiladores cl√°ssicos dos execut√°veis Dalvik, colocando caracteres unicode no meio do nome da fun√ß√£o, classe, propriedade etc, fazendo que o decompilador, ao tentar montar o pseudoc√≥digo Java, √† partir do SMALI, caia em um loop de exce√ß√µes. Ainda bem que podemos criar padr√µes de hooking baseados nas assinaturas de tipo das fun√ß√µes, e tamb√©m enumerar uma classe por essas mesmas caracter√≠sticas em seu construtor.\n√Ä partir daqui, foi s√≥ programar uma extens√£o para meu proxy para conseguir enviar as requisi√ß√µes para o servidor de backend com a mesma chave que o cliente original utilizaria para criptografar as payloads enviadas. Depois de todo esse trabalho, comecei a automatizar as requisi√ß√µes para conseguir, finalmente, fazer o fingerprint de chaves PIX, e tamb√©m zuar alguns amigos com centenas de transa√ß√µes de um centavo com frases aleat√≥rias do Chuck Norris (caso um dia tiver um domingo tedioso, recomendo utilizar essa API para azucrinar uns amigos).\nShellScript e jq para come√ßar a automa√ß√£o Depois de fazer todas as muambas necess√°rias para fazer o script funcionar, temos essa belezura em a√ß√£o:\nE agora era s√≥ passar a chave de algu√©m, e ser feliz:\n‚ûú automator ./pixmap.sh --key=\u0026#34;+5511.......\u0026#34; [+] Key +5511......., of type PHONE intel: \u0026gt; ISPB: 18236120 \u0026gt; Institution: NU PAGAMENTOS S.A. \u0026gt; Owner: Jonas Uliana \u0026gt; Owner Type: PERSONAL \u0026gt; Document: 000........ S√≥ substitui meus dados por pontos, assim que alguns bancos responderem adequadamente sobre alguns pontos que notei de bem perigoso na arvore de riscos ao analisar o fluxo transacional do PIX, irei tamb√©m deixar o script, e uma ferramenta de OSINT (isso √© OSINT? N√£o sei dizer muito bem) decente de fato para azucrinar seus amigos e enriquecer a lista de phishing da empresa.\nMinhas conclus√µes Ainda est√° se popularizando, cada vez mais com maior ado√ß√µes e popularidade, mas te todos os testes que fiz em diferentes meios de pagamentos (incluindo bancos, fintechs e tudo mais), √© vis√≠vel que existe muita falta de maturidade dos modelos de risco ao lidar com fluxos fraudulentos ou an√≥malos dentro do PIX.\nOutro ponto que n√£o sei dizer se √© um risco, ou uma regra de neg√≥cio √† ser seguida do BACEN, √© a permiss√£o de uma conta poder pesquisar centenas de milhares de outras chaves PIX de uma s√≥ vez. Notei que nenhuma institui√ß√£o tinha implementado controles de rate limiting ou similares, diretamente em suas APIs. A prop√≥sito, foi bem legal notar diversas dessas empresas utilizando GraphQL, eu particularmente prefiro bastante, e acredito que qualquer um que desenvolva frontend compartilhe desse mesmo sentimento.\nE sobre bloquear o aceite de mensagens no PIX? Bom, acredito que isso pode ser implementado no meio de pagamento, n√£o quero receber mensagens de amea√ßa/marketing ou nada do tipo, ainda que isso implique em ganhar alguns centavos. Meus amigos que ca√≠ram na minha zueira, fizeram 10 reais cada, mas para totalizar essa grana, tomaram 1000 transa√ß√µes PIX com frases do Chuck Norris.\n","permalink":"https://exception.blog/posts/hackeando-apps-financeiros-para-osint/","summary":"O PIX foi uma das maiores mudan√ßas que tivemos promovidas pelo BACEN (e por outras institui√ß√µes financeiras ligadas aos f√≥runs), que vai promover muita agilidade, simplicidade, e o mais importante seguran√ßa. Um dos pontos mais perigosos de vender um produto, ou uma feature dele como sendo algo seguro, √© que muitas vezes isso pode ser utilizado contra voc√™.\nPara n√£o focarmos no PIX, e ir direto ao assunto, deixo como recomenda√ß√£o uma postagem feita pelo mestre Anchises l√° no blog do posto Ipiranga, voc√™ pode encontra-l√° aqui, recomendo que fa√ßa a leitura do conte√∫do, antes de avan√ßar por aqui.","title":"Hackeando apps financeiros para OSINT (e pela zueira): Tudo pelo PIX!"},{"content":"Dando um push() no problema Um dos desafios que nem com as t√©cnicas mais sombrias de debugging me ajudaram a entender o que meu contexto de requisi√ß√µes HTTP ass√≠ncronos e paralelos estavam retornando uma exce√ß√£o baseada no cancelamento das refer√™ncias das inst√¢ncias dos v√°rios CancellationToken utilizados para construir o cliente das requisi√ß√µes.\nFoi uma discuss√£o bem legal com alguns monstros da CLR e at√© mesmo do Roslyn, que com uma paci√™ncia de J√≥, conseguiram ir a fundo na explica√ß√£o sobre o funcionamento da pilha de rede dentro do .NET, e tamb√©m, sobre a abstra√ß√£o que estava consumindo. No geral, as diversas tasks que havia emitido, que foram passadas para serem aguardadas sua execu√ß√£o at√© o fim como par√¢metro da fun√ß√£o WhenAll l√° do bin√°rio System.Runtime.dll.\n Para n√£o descer muito o n√≠vel, e deixar tudo de maneira bem entend√≠vel, n√£o vou abranger muito a explica√ß√£o que absorvi, e focar na resolu√ß√£o desse problema relativamente simples.\n Nem sempre √© tudo uma quest√£o de alto n√≠vel Em contextos de paralelismo com tarefas que consomem muito tempo do processador, ainda que existem outras v√°rias camadas para orquestrarem essas tarefas, desde de o pr√≥prio CPU at√© o sistema operacional e a pr√≥pria stack de desenvolvimento, cabe a n√≥s implementarmos controles eficazes na orquestra√ß√£o nas nossas pr√≥prias tarefas.\nEspecialmente nas linguagens de alt√≠ssimo n√≠vel, que entregam uma abstra√ß√£o muito abstrata - eu ri por dentro aqui - do que realmente √© uma thread, devemos ter essa aten√ß√£o dobrada para n√£o cair em um contexto de cancelamento pois o tempo de resposta da aplica√ß√£o para o ambiente onde foi delegada sua execu√ß√£o chegar ao limite.\nNesse cen√°rio do HttpClientHandler e do HttpClient isso fica mais f√°cil de se perceber, mesmo que voc√™ implemente um timeout na casa dos TimeSpam.FromDays(666), se o tempo de execu√ß√£o de qualquer uma das fun√ß√µes ass√≠ncronas do HttpClient, como a mais utilizada HttpClient.SendAsync(HttpRequestMessage), podem retornar um timeout, mas n√£o da resposta HTTP do servidor, e sim da sua Task que est√° no limbo do atual contexto de processamento.\n Vai por mim, evite utilizar fun√ß√µes que podem receber uma sobrecarga de uma inst√¢ncia de CancellationToken, se ela pode trabalhar com os status provenientes dessa estrutura, algum motivo tem.\n Para simplificar o entendimento de todo esse cen√°rio intang√≠vel, vamos trazer ao c√≥digo uma p√©ssima pr√°tica de programa√ß√£o (que quase me fez desistir do desenvolvimento do HttpDoom) relacionada ao paralelismo e assincronicidade de c√≥digo:\nusing System; using System.Linq; using System.Net.Http; using System.Threading.Tasks; namespace Exception.Examples { internal static class Program { public static async Task Main() { var tasks = await Task.WhenAll(Enumerable.Range(1, 5000) .Select(_ =\u0026gt; new HttpClient().GetAsync(\u0026#34;https://google.com\u0026#34;))); tasks .Where(t =\u0026gt; true) .ToList() .ForEach(r =\u0026gt; Console.WriteLine($\u0026#34;Google answered {r.StatusCode}\u0026#34;)); } } }  Nota: Top-level programs ainda tem algumas coisas bem peculiares para tratar infer√™ncia din√¢mica de tipos e de contextos ass√≠ncronos e paralelos no C# 9, ent√£o vamos no cl√°ssico entrypoint program mesmo.\n Um c√≥digo bem simples, e que - se liga no plot twist - funciona perfeitamente bem! O motivo de tudo funcionar como deveria, √© que temos implementado somente uma √∫nica responsabilidade dentro da fun√ß√£o paralela e ass√≠ncrona, onde √© iniciado 5000 Task\u0026lt;HttpResponseMessage\u0026gt; que ser√° aguardada logo no seu enclosure que √© justamente a pr√≥pria Task.WhenAll, por ser uma express√£o LINQ, o c√≥digo pode ser um pouco dif√≠cil de ler, mas nada que alguns minutos de leitura n√£o resolva.\nO problema que estamos tentando criar, acontece quando al√©m dessa √∫nica coisa que √© feita (return new HttpClient().GetAsync(\u0026quot;https://google.com\u0026quot;)), na express√£o an√¥nima da extens√£o Select() l√° do LINQ), adicionamos alguma fun√ß√£o que freia a execu√ß√£o dessa thread, por exemplo, escrever na tela informa√ß√µes da requisi√ß√£o conforme s√£o executadas, vamos alterar um pouco o c√≥digo e adicionar algumas fun√ß√µes que fa√ß√£o opera√ß√µes de IO:\n// ... await Task.WhenAll(Enumerable.Range(1, 5000) .Select(async _ =\u0026gt; { try { var response = await new HttpClient().GetAsync(\u0026#34;https://google.com\u0026#34;); Console.Write($\u0026#34;Remote {response.RequestMessage?.RequestUri} answered {response.StatusCode}, \u0026#34;); var content = await response.Content.ReadAsByteArrayAsync(); Console.WriteLine($\u0026#34;with a length of {content.Length} byte(s)\u0026#34;); return response; } catch (System.Exception e) { Console.WriteLine(e.InnerException != null ? $\u0026#34;Error: {e.InnerException.Message}\u0026#34; : $\u0026#34;Error: {e.Message}\u0026#34;); } })); // ... Nesse cen√°rio como temos a intera√ß√£o com opera√ß√µes que causam problemas na hora de serem executadas, e nem por realizarem opera√ß√µes de IO com response.Content.ReadAsByteArrayAsync() mas sim pela escrita na tela usando System.Console, que causa um lock e vira uma bagun√ßa, quem estiver dispon√≠vel, executa essa fun√ß√£o.\nQuando voc√™ executar esse c√≥digo (al√©m de receber um bel√≠ssimo banimento da Google por realizar milhares de requisi√ß√µes em t√£o pouco tempo), vai se deparar com algumas exce√ß√µes de Task ao inv√©s das inst√¢ncias de classes referentes a pilha de rede do .NET, no caso a famosa mensagem \u0026ldquo;The operation was canceled\u0026rdquo;.\nE justamente quando receber essa resposta, √© que os problemas do paralelismo come√ßam a perturbar sua sanidade.\nResolvendo com uma boa sinaliza√ß√£o Existem diversas APIs que s√£o fornecidas dentro do CLR para sanar os problemas de paralelismo que correspondem a estes erros, podemos realizar a implementa√ß√£o mais simples que conhe√ßo, que tem pouqu√≠ssimas altera√ß√µes no c√≥digo fonte original da aplica√ß√£o, utilizando SemaphoreSlim para corrigir esse fiasco.\nPodemos resumir esse elemento de System.Threads como sendo uma entidade respons√°vel por limitar o n√∫mero de threads que podem acessar uma pool de recursos, que √© justamente o que causa \u0026ldquo;The operation was canceled\u0026rdquo; dentro de uma Task. Sua implementa√ß√£o √© bem simples, e ele receber por padr√£o um √∫nico argumento correspondente a quantidade m√°xima de threads que podem ser alocadas para acessar estes recursos:\nvar semaphore = new SemaphoreSlim(Environment.ProcessorCount); await Task.WhenAll(Enumerable.Range(1, 1000) .Select(async _ =\u0026gt; { await semaphore.WaitAsync(); try { var response = await new HttpClient().GetAsync(\u0026#34;https://zup.com.br\u0026#34;); Console.Write($\u0026#34;Remote {response.RequestMessage?.RequestUri} answered {response.StatusCode}, \u0026#34;); var content = await response.Content.ReadAsByteArrayAsync(); Console.WriteLine($\u0026#34;with a length of {content.Length} byte(s)\u0026#34;); return response; } catch (System.Exception e) { Console.WriteLine(e.InnerException != null ? $\u0026#34;Error: {e.InnerException.Message}\u0026#34; : $\u0026#34;Error: {e.Message}\u0026#34;); return null; } finally { semaphore.Release(); } })); Agora al√©m de podermos controlar o n√∫mero de threads que ser√£o utilizados para realizar as requisi√ß√µes, tamb√©m n√£o vamos ter problemas de concorr√™ncia ao tentar processar essa pool de tarefas alocadas no fluxo de execu√ß√£o da aplica√ß√£o.\n","permalink":"https://exception.blog/posts/problemas-com-httpclient-resolvidos/","summary":"Dando um push() no problema Um dos desafios que nem com as t√©cnicas mais sombrias de debugging me ajudaram a entender o que meu contexto de requisi√ß√µes HTTP ass√≠ncronos e paralelos estavam retornando uma exce√ß√£o baseada no cancelamento das refer√™ncias das inst√¢ncias dos v√°rios CancellationToken utilizados para construir o cliente das requisi√ß√µes.\nFoi uma discuss√£o bem legal com alguns monstros da CLR e at√© mesmo do Roslyn, que com uma paci√™ncia de J√≥, conseguiram ir a fundo na explica√ß√£o sobre o funcionamento da pilha de rede dentro do .","title":"Solucionando problemas de sincronismo de requisi√ß√µes em paralelo com SemaphoreSlim"},{"content":"Ol√°, como deve ter percebido, sou o Jojo, escrevo neste blog coisas que gosto, focados em seguran√ßa da informa√ß√£o, linguagens de programa√ß√£o exot√©ricas e um pouco de compiladores/interpretadores de linguagens ainda mais estranhas. Todo o conte√∫do (e o pr√≥prio blog) est√° dispon√≠vel nesse reposit√≥rio esperando seu forks e tamb√©m pull-requests caso quiser publicar algo, bem como corrigir uma cagada ou outra que escrevo aqui.\nPara entrar em contato comigo, √© s√≥ pegar minha chave no Keybase, e enviar uma mensagem para jonas dot uliana at passwd dotcom dot br (ou preferencialmente por l√° mesmo).\n The content is aimed at Brazilian Portuguese, but some posts are available in English as well.\n ","permalink":"https://exception.blog/about/","summary":"Ol√°, como deve ter percebido, sou o Jojo, escrevo neste blog coisas que gosto, focados em seguran√ßa da informa√ß√£o, linguagens de programa√ß√£o exot√©ricas e um pouco de compiladores/interpretadores de linguagens ainda mais estranhas. Todo o conte√∫do (e o pr√≥prio blog) est√° dispon√≠vel nesse reposit√≥rio esperando seu forks e tamb√©m pull-requests caso quiser publicar algo, bem como corrigir uma cagada ou outra que escrevo aqui.\nPara entrar em contato comigo, √© s√≥ pegar minha chave no Keybase, e enviar uma mensagem para jonas dot uliana at passwd dotcom dot br (ou preferencialmente por l√° mesmo).","title":"About"}]