<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Jojo's Exceptions</title><link>https://exception.blog/</link><description>Recent content on Jojo's Exceptions</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 06 Jul 2021 23:38:32 -0300</lastBuildDate><atom:link href="https://exception.blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Interagir em enquetes abertas no LinkedIn é uma péssima ideia!</title><link>https://exception.blog/posts/interagir-em-enquetes-no-linkedin-e-uma-pessima-ideia/</link><pubDate>Sun, 14 Mar 2021 15:31:10 -0300</pubDate><guid>https://exception.blog/posts/interagir-em-enquetes-no-linkedin-e-uma-pessima-ideia/</guid><description>Diversas vezes me deparo na rede social voltada para trabalho (uma nota pessoal sobre, politica nacional, tem muito haver com o nosso trabalho), inumeras enquetes no estilo interaja com determinada ação, para exibir qual a sua opção dentre as possíveis enumeradas em determinada postagem, que são um prato cheio para o pessoal que gosta de analisar perfils, ou de inteligência. Atualmente, isso vem se popularizando muito, por conta de cada vez mais atritos entre o Bolsonaro, com o retorno oficial de Lula à cena deplorável da politica brasileira.</description><content>&lt;p>Diversas vezes me deparo na rede social &lt;em>voltada para trabalho&lt;/em> (uma nota pessoal sobre, politica nacional, tem &lt;strong>muito&lt;/strong> haver com o nosso trabalho), inumeras enquetes no estilo interaja com determinada ação, para exibir qual a sua opção dentre as possíveis enumeradas em determinada postagem, que são um prato cheio para o pessoal que gosta de analisar perfils, ou de inteligência. Atualmente, isso vem se popularizando muito, por conta de cada vez mais atritos entre o Bolsonaro, com o retorno oficial de Lula à cena deplorável da politica brasileira.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Nota&lt;/strong>: Não gosto de ambos os possíveis presidenciáveis de 2022, mas assumo que repudio o descaso do atual presidente a cena que vivemos na pandemia, bem como a falta de transparência do presidente rival em entregar mais clareza dos fatos pessoais de seus julgamentos. Mas pela várzea que vivemos, acredito que não preciso explicar minha opinião para essas duas figuras.&lt;/p>
&lt;/blockquote>
&lt;p>Antes de mais nada, acredito que qualquer fluxo de tratamento de dados que possa ser especializado sem muito esforço por uma parte, sempre vai ser uma péssima ação, qualquer tipo de interação com essas entidades. Afinal de contas, a rede da Microsoft já tem acesso a todos os nossos padrões de comportamento, e a única ressalva que temos é as politicas e leis de proteção aos dados pessoais (que parece valer menos caso você for um utilizador chinês na plataforma, ou não for um cidadão de mesma nacionalidade da plataforma, mas esses casos de conflitos de interesses entre ocidente e oriente, bem como os próprios interesses do LinkedIn, fica para outra postagem).&lt;/p>
&lt;p>Como o LinkedIn é uma rede que tende a ser aberta para quem tem vincúlo com a pessoa &lt;code>X&lt;/code> ou &lt;code>Y&lt;/code>, não esperem de mim censurar os nomes e perfils, bem como o resultado dessa análise. Para ficar com o de costume, caso encontrar seus dados aqui na minha análise, e precisar esconde-los daqui, basta abrir uma &lt;em>issue&lt;/em> ou uma &lt;em>pull request&lt;/em> no blog, através de seu repositório no GitHub.&lt;/p>
&lt;h1 id="enfim-coisas-técnicas">Enfim coisas técnicas&lt;/h1>
&lt;p>Fui para o caminho mais rápido possível para isso, poderia ter analisado o aplicativo ou tentado encontrar algo já pronto para essa finalidade, mas acredito que a diversão de trabalhar com escopos de análise de dados em plataformas que não dispõe com clareza formas de interagir com os dados ali presentes, um desafio simples, mas muito produtivo no aspecto de mapear perfils em redes sociais, seja ela do tipo que for.&lt;/p>
&lt;p>Como de praste, minha &lt;em>stack&lt;/em> de desenvolvimento vai ser o C# 9, junto do .NET5 (em breve pretendo mudar o &lt;em>target&lt;/em> para quando a &lt;em>preview&lt;/em> 3 do .NET6 estiver disponível, especialmente para brincar no Apple Silicon, e também explorar mais a MAUI, além de não ter problemas com a RFC do &lt;em>float&lt;/em>). Para o &lt;em>parsing&lt;/em> da sopinha de &lt;em>tags&lt;/em> do HTML, vou tentar uma approach o mais &lt;em>vanilla&lt;/em> possível, utilizando &lt;code>IndexOf()&lt;/code>, &lt;code>Remove()&lt;/code> e funções nativas da linguagem, para garantir uma performance consistente, sem adicionar bibliotecas complexas para uma finalidade muito simples.&lt;/p>
&lt;h3 id="analisando-a-requisição-de-uma-postagem">Analisando a requisição de uma postagem&lt;/h3>
&lt;p>A primeira coisa que vou fazer (estou escrevendo enquanto vou descobrindo a melhor forma de fazer isso acontecer, então caso queira apenas o resultado final, vá direto ao repositório referênciado no final da postagem) é analisar a aba &lt;em>network&lt;/em> do navegador, ao interagir com uma postagem:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">curl &lt;span style="color:#e6db74">&amp;#39;https://www.linkedin.com/voyager/api/feed/reactions?count=10&amp;amp;q=reactionType&amp;amp;start=70&amp;amp;threadUrn=urn:li:activity:XXXXX614171169XXXXX&amp;#39;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> -H &lt;span style="color:#e6db74">&amp;#39;...&amp;#39;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> --compressed
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Realmente esperei que seria algo mais complexo, mas o LinkedIn facilita bastante, já que sua API RESTful fornece o &lt;em>endpoint&lt;/em> &lt;code>reactions&lt;/code> de fácil acesso a qualquer usuário, claro que no cabeçalho da requisiçao, existia minha sessão, que por motivos óbvios, acabei removendo-a para evitar problemas com os amigos &lt;em>h4x05s&lt;/em>.&lt;/p>
&lt;p>Além disso, os parâmetros de paginação, &lt;code>start&lt;/code> e &lt;code>count&lt;/code> vão facilitar bastante na hora de realizar as requisições de fato! Da forma facilitada que estamos vendo, acredito que uma alternativa 100% válida seria utilizar somente ShellScript junto do &lt;code>jq&lt;/code>, acabaria por resolver esse primeiro ponto. Mas como quero fazer algo com um pouco mais de funções, vou prosseguir com a ideia do C#, e pelo visto, nem será necessário quebrar a cabeça com o &lt;em>parsing&lt;/em> de qualquer trecho da página.&lt;/p>
&lt;p>Expondo o &lt;em>dataset&lt;/em> que vou consumir, será &lt;a href="https://www.linkedin.com/posts/wanderson-santos-136a1bb0_e-a%C3%AD-o-que-ser%C3%A1-de-n%C3%B3s-activity-6775961417116983296-2aR0/">essa postagem&lt;/a>.&lt;/p>
&lt;p>Com tantas informações já disponíveis, vamos codificar um pouco! Graças ao &lt;code>record&lt;/code> do C# 9, abstrair esses modelos de dados ficaram muito simples, e extremamente performáticos:&lt;/p>
&lt;p>&lt;img src="https://exception.blog/static/image-20210314164216249.png" alt="A foto do progresso!">&lt;/p>
&lt;p>Evoluindo para um melhor entendimento da resposta vinda da API, que não é tão fácil de entender a primeiro momento, mas depois fica bem tranquilo de entender (existe formas bem mais ficientes de ser implementado o &lt;em>parsing&lt;/em>):&lt;/p>
&lt;p>&lt;img src="https://exception.blog/static/image-20210314174239109.png" alt="Enumerando usuários paginados na requisição">&lt;/p>
&lt;p>Depois de continuar evoluindo o código para respeitar (parcialmente) a paginação, e entendendo melhor como funciona o comportamento dos servidores do LinkedIn, em especial, sobre &lt;em>rate limiting&lt;/em>, foi só uma questão de escrever um código XGH para extrair todo o conteúdo, e indexa-lo em um arquivo &lt;code>.csv&lt;/code> para uma análise mais profunda:&lt;/p>
&lt;p>&lt;img src="https://exception.blog/static/image-20210314200041144.png" alt="O dataset formado">&lt;/p>
&lt;p>Para simpliificar, e não fazer diversas requisições ao &lt;em>backend&lt;/em> do LinkedIn, escolhi aleatóriamente 1064 pessoas daquela postagem. Por fim o código em C# ficou uma bagunça, mas cumpriu seu propósito de forma majestosa, indexando todos esses resultados em apenas alguns segundos - tudo isso pode ser parametrizado através dos parâmetros da própria API da rede social.&lt;/p>
&lt;p>Um ponto de atenção, é sobre os &lt;em>cookies&lt;/em> necessários para estar autenticado, e também, autorizado dentro do LinkedIn:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">var&lt;/span> session = &lt;span style="color:#66d9ef">new&lt;/span> CookieContainer();
session.Add(&lt;span style="color:#66d9ef">new&lt;/span> Cookie(&lt;span style="color:#e6db74">&amp;#34;JSESSIONID&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;...&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;.www.linkedin.com&amp;#34;&lt;/span>));
session.Add(&lt;span style="color:#66d9ef">new&lt;/span> Cookie(&lt;span style="color:#e6db74">&amp;#34;li_at&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;...&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;.www.linkedin.com&amp;#34;&lt;/span>));
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Todos os demais &lt;em>cookies&lt;/em> são apenas &lt;em>trackers&lt;/em> ou caso você utilize um provedor de SSO. Para os &lt;em>headers&lt;/em>, para minha surpresa, só é necessário o seguinte:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">var&lt;/span> reactionsMessage = &lt;span style="color:#66d9ef">new&lt;/span> HttpRequestMessage(HttpMethod.Get, post)
{
Headers =
{
{&lt;span style="color:#e6db74">&amp;#34;csrf-token&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;...&amp;#34;&lt;/span>}
}
};
&lt;/code>&lt;/pre>&lt;/div>&lt;p>E claro, configurar adequadamente seu &lt;code>HttpClient&lt;/code> e &lt;code>HttpClientHandler&lt;/code>. Deixei os &lt;em>cookies&lt;/em> apontados para o objeto &lt;code>session&lt;/code>, do primeiro &lt;em>snippet&lt;/em> de código, dessa forma ficou tudo bem organizado da seguinte forma:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">using&lt;/span> var clientHandler = &lt;span style="color:#66d9ef">new&lt;/span> HttpClientHandler
{
UseCookies = &lt;span style="color:#66d9ef">true&lt;/span>,
AllowAutoRedirect = &lt;span style="color:#66d9ef">false&lt;/span>,
CookieContainer = session
};
&lt;span style="color:#66d9ef">using&lt;/span> var client = &lt;span style="color:#66d9ef">new&lt;/span> HttpClient(clientHandler);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Depois de tudo isso, veio uma parte meia feia, no que se diz respeito as melhores práticas para nomear os tipos dentro do C#, isso acontece nessa versão do .NET5 por conta da falta de suporte da &lt;em>annotation&lt;/em> &lt;code>JsonPropertyName&lt;/code>, de ser utilizada em &lt;code>record&lt;/code> e também em seus construtores, então para simplificar o código, abstrai apenas os elementos que foram importantes para essa análise:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">private&lt;/span> record Paging(&lt;span style="color:#66d9ef">int&lt;/span> start, &lt;span style="color:#66d9ef">int&lt;/span> total, &lt;span style="color:#66d9ef">int&lt;/span> count);
&lt;span style="color:#66d9ef">private&lt;/span> record description(&lt;span style="color:#66d9ef">string&lt;/span> text);
&lt;span style="color:#66d9ef">private&lt;/span> record name(&lt;span style="color:#66d9ef">string&lt;/span> text);
&lt;span style="color:#66d9ef">private&lt;/span> record Element(&lt;span style="color:#66d9ef">string&lt;/span> reactionType, description description, name name);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>De certa forma ficou simples, porém dava para ter feito melhor. Com as limitações da &lt;code>System.Text.Json&lt;/code>, acredito que por enquanto, esse seria o mais minificado que conseguiria chegar por enquanto. Para realizar o &lt;em>parsing&lt;/em> do JSON que é respondido, fiz algo bem simples - mas sentindo muita falta da simplicidade de tratar tipos de forma dinâmica, igual temos na NewtonSoftware, mas como sempre prefiro fazer sem utilizar nada além da &lt;em>std&lt;/em>, acho que está de bom tamanho:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">var&lt;/span> content = &lt;span style="color:#66d9ef">await&lt;/span> response.Content.ReadAsStringAsync();
&lt;span style="color:#66d9ef">var&lt;/span> payload = JsonSerializer.Deserialize&amp;lt;JsonElement&amp;gt;(content);
&lt;span style="color:#66d9ef">var&lt;/span> paging = JsonSerializer.Deserialize&amp;lt;Paging&amp;gt;(payload.GetProperty(&lt;span style="color:#e6db74">&amp;#34;paging&amp;#34;&lt;/span>).GetRawText());
&lt;span style="color:#66d9ef">if&lt;/span> (paging == &lt;span style="color:#66d9ef">null&lt;/span>) &lt;span style="color:#66d9ef">return&lt;/span>;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>E dessa forma seguimos o &lt;em>parsing&lt;/em> para os demais &lt;code>record&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c#" data-lang="c#">&lt;span style="color:#66d9ef">var&lt;/span> elements = JsonSerializer.Deserialize&amp;lt;List&amp;lt;Element&amp;gt;&amp;gt;(payload.GetProperty(&lt;span style="color:#e6db74">&amp;#34;elements&amp;#34;&lt;/span>).GetRawText());
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Na verdade todos eles estão referenciados explicitamente pelo &lt;code>Element&lt;/code>, dessa forma, basta iterar sobre a lista e colher os dados que julgar necessário. No meu caso imprimi na tela, conforme nas primeiras imagens, para ter uma noção de como as coisas estavam funcionando:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c#" data-lang="c#">elements.ForEach(e =&amp;gt;
{
&lt;span style="color:#66d9ef">if&lt;/span> (e == &lt;span style="color:#66d9ef">null&lt;/span>) &lt;span style="color:#66d9ef">return&lt;/span>;
&lt;span style="color:#66d9ef">if&lt;/span> (e.name != &lt;span style="color:#66d9ef">null&lt;/span> &amp;amp;&amp;amp; !&lt;span style="color:#66d9ef">string&lt;/span>.IsNullOrEmpty(e.name.text))
{
Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34; &amp;gt; User: {e.name.text.ToUpperInvariant()}&amp;#34;&lt;/span>);
}
&lt;span style="color:#66d9ef">if&lt;/span> (e.description != &lt;span style="color:#66d9ef">null&lt;/span> &amp;amp;&amp;amp; !&lt;span style="color:#66d9ef">string&lt;/span>.IsNullOrEmpty(e.description.text))
{
Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34; &amp;gt; Role: {e.description.text.ToUpperInvariant()}&amp;#34;&lt;/span>);
}
&lt;span style="color:#66d9ef">if&lt;/span> (e.reactionType != &lt;span style="color:#66d9ef">null&lt;/span> &amp;amp;&amp;amp; !&lt;span style="color:#66d9ef">string&lt;/span>.IsNullOrEmpty(e.reactionType))
{
Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34; &amp;gt; Type: {e.reactionType}&amp;#34;&lt;/span>);
}
});
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ainda que não temos algo dinâmico, as referênciais internas dos &lt;code>record&lt;/code> ainda podem ser traiçoeiras se acessadas diretamente, como tentar navegar diretamente para &lt;code>e.name.text&lt;/code>, que pode resultar em uma referência nula dentro do escopo de execução, por isso temos também a validação de &lt;code>e.name != null&lt;/code>.&lt;/p>
&lt;p>Depois disso tudo, só utilizo um &lt;code>Distinct()&lt;/code> e indexo todo o resultado em um &lt;code>.csv&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">await&lt;/span> File.WriteAllLinesAsync(&lt;span style="color:#e6db74">&amp;#34;result.csv&amp;#34;&lt;/span>, textToWrite.Distinct().ToList());
&lt;/code>&lt;/pre>&lt;/div>&lt;p>E tudo isso vai ter como produto, o que vamos utilizar para analisar de forma mais profunda os dados, de quem gosta mais de &lt;code>X&lt;/code> ou &lt;code>Y&lt;/code>.&lt;/p>
&lt;h1 id="quem-é-quem">Quem é quem?&lt;/h1>
&lt;p>Vamos analisar brevemente os dados produzidos. Para simplificar, realizei a conversão desse &lt;code>.csv&lt;/code> para um &lt;code>.sqlite&lt;/code> (poderia ter utilizado algo mais simples com &lt;code>pandas&lt;/code>) e consumindo os resultados pela própria &lt;em>shell&lt;/em> do &lt;code>sqlite3&lt;/code>:&lt;/p>
&lt;pre>&lt;code class="language-sqlite" data-lang="sqlite">sqlite&amp;gt; .schema
CREATE TABLE CRAW(
&amp;quot;NAME&amp;quot; TEXT,
&amp;quot;ROLE&amp;quot; TEXT,
&amp;quot;REACTION&amp;quot; TEXT
);
sqlite&amp;gt; SELECT COUNT() FROM CRAW;
1064
&lt;/code>&lt;/pre>&lt;p>Para a postagem que utilizei como referência, temos:&lt;/p>
&lt;ul>
&lt;li>À favor do Bolsonaro: Quem possivelmente teve sua reação como sendo &lt;code>LIKE&lt;/code>;&lt;/li>
&lt;li>À favor do Lula: Quem possívelmente teve sua reação como sendo &lt;code>EMPATHY&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>Com isso em pauta, vamos olhar a quantidade de pessoas que votaram em cada uma das figuras políticas:&lt;/p>
&lt;pre>&lt;code class="language-sqlite" data-lang="sqlite">sqlite&amp;gt; SELECT COUNT() FROM CRAW WHERE REACTION = &amp;quot;EMPATHY&amp;quot;;
319
sqlite&amp;gt; SELECT COUNT() FROM CRAW WHERE REACTION = &amp;quot;LIKE&amp;quot;;
668
&lt;/code>&lt;/pre>&lt;p>Nesse &lt;em>dataset&lt;/em> que colhi da postagem, chegamos ao total de 319 votos à favor do Lula, e 668 votos para o Bolsonaro. Porém, da mesma forma que podemos apenas realizar um &lt;code>COUNT()&lt;/code>, também podemos olhar apenas para os nomes de quem possívelmente prefere governo &lt;code>X&lt;/code> ou &lt;code>Y&lt;/code>, começando pelo candidato de direita:&lt;/p>
&lt;pre>&lt;code class="language-sqlite" data-lang="sqlite">sqlite&amp;gt; SELECT NAME FROM CRAW WHERE REACTION = &amp;quot;LIKE&amp;quot; LIMIT 10;
NADINE JUNKES
MATHEUS CHAGAS
BRUNO JARED CRUZ
JOÃO GANDOLFI
URIEL OLIVEIRA BEZERRA
ADONAI DUTRA
CARLOS EVERTON DOS SANTOS GERALDO
JEFFERSON J.
SARA ELAINE LOPES PEREIRA
MÁRCIO ROSA
&lt;/code>&lt;/pre>&lt;p>E por fim, Lula:&lt;/p>
&lt;pre>&lt;code class="language-sqlite" data-lang="sqlite">sqlite&amp;gt; SELECT NAME FROM CRAW WHERE REACTION = &amp;quot;EMPATHY&amp;quot; LIMIT 10;
ANA CECÍLIA MACHADO
GIOVANNA DUARTE ALMEIDA
LUCAS CATTA PRÊTA
SHEILA PATRICIO
DANIEL TOMAZELLI RAMOS
CRISTIANO FERREIRA
SUELLEN CAROLINE
SABRINA BECKER
VINICIUS T.
VICTÓRIA LAPENNA RODRIGUES
&lt;/code>&lt;/pre>&lt;p>Também podemos analisar os cargos de cada um, e correlaciona-los com o possível ideal político base de dada um. Da mesma forma, podemos utilizar essa mesma análise para determinar o cunho político de uma empresa, marca ou qualquer página no LinkedIn que fique atrelada a uma pessoa.&lt;/p>
&lt;h1 id="conclusão">Conclusão&lt;/h1>
&lt;p>Em poucos minutos (na verdade foi um intervalo de algumas horas, domingo é dia de arrumar a casa, e meus gatos conseguiram se superar essa semana), vimos a possibilidade de escrever um &lt;em>crawler&lt;/em> muito simples para análisar uma postagem relacionada a uma &lt;em>poll&lt;/em> baseada em reações, e chegar em cada um dos perfils que reagiram individualmente.&lt;/p>
&lt;p>Lembre-se que fiz isso sem buscar qualquer resultado ou benefício disso, mas sabemos que existem centenas de empresas que fazem diferente. Da mesma forma, imagine a quantidade de empresas que possívelmente te barrou em um processo seletivo, por analisar rapidamente seu perfil com alguma dessas ferramentas, e verificou que seu ideal político, ou seja lá qual for os dados que a empresa estiver analisando, não está de acordo com ela.&lt;/p>
&lt;p>No final do dia, todos nós somos dados, números e métricas. Dentro do LinkedIn, especialmente pelo fato de existir uma concepção ou idéia de que todos somos autênticos (no sentido de não ter uma grande concentração de perfils de identidade incertas, ou &lt;em>fakes&lt;/em> de outras pessoas), isso se torna &lt;strong>muito&lt;/strong> mais perigoso. Então tenha mais cuidado ao interagir com esse tipo de informação, seus dados podem estar nesse momento passando na mão da empresa que você acabou de aplicar.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Nota&lt;/strong>: Ao ver que ainda existem pessoas que carregam políticos de estimação, vejo que 2022 vai ser um ano muito complicado. Também aproveito o momento para repetir: Por mim ambas as figuras presidenciáveis são, no mínimo, ridículas.&lt;/p>
&lt;/blockquote></content></item><item><title>Hackeando apps financeiros para OSINT (e pela zueira): Tudo pelo PIX!</title><link>https://exception.blog/posts/hackeando-apps-financeiros-para-osint/</link><pubDate>Sun, 10 Jan 2021 16:47:21 -0300</pubDate><guid>https://exception.blog/posts/hackeando-apps-financeiros-para-osint/</guid><description>O PIX foi uma das maiores mudanças que tivemos promovidas pelo BACEN (e por outras instituições financeiras ligadas aos fóruns), que vai promover muita agilidade, simplicidade, e o mais importante segurança. Um dos pontos mais perigosos de vender um produto, ou uma feature dele como sendo algo seguro, é que muitas vezes isso pode ser utilizado contra você.
Para não focarmos no PIX, e ir direto ao assunto, deixo como recomendação uma postagem feita pelo mestre Anchises lá no blog do posto Ipiranga, você pode encontra-lá aqui, recomendo que faça a leitura do conteúdo, antes de avançar por aqui.</description><content>&lt;p>O PIX foi uma das maiores mudanças que tivemos promovidas pelo BACEN (e por outras instituições financeiras ligadas aos fóruns), que vai promover muita agilidade, simplicidade, e o mais importante segurança. Um dos pontos mais perigosos de vender um produto, ou uma &lt;em>feature&lt;/em> dele como sendo algo seguro, é que muitas vezes isso pode ser utilizado contra você.&lt;/p>
&lt;p>Para não focarmos no PIX, e ir direto ao assunto, deixo como recomendação uma postagem feita pelo mestre Anchises lá no &lt;em>blog do posto Ipiranga&lt;/em>, você pode encontra-lá &lt;a href="https://anchisesbr.blogspot.com/2020/10/seguranca-aspectos-de-seguranca-do-pix.html">aqui&lt;/a>, recomendo que faça a leitura do conteúdo, antes de avançar por aqui.&lt;/p>
&lt;p>Antes de cairmos em cima do banco, ou &lt;em>fintech&lt;/em> que escolhi para efetuar o &lt;em>bypassing&lt;/em> de todas as funcionalidades de segurança da aplicação - ofuscação de payloads não é bala de prata, uma dica importante - vou trazer um trecho do próprio Anchises da sua postagem em seu blog:&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://www.bcb.gov.br/estabilidadefinanceira/pagamentosinstantaneos">Segundo o Banco Central&lt;/a>, o objetivo é oferecer pagamento instantâneo seja tão fácil, simples, intuitiva e rápida quanto realizar um pagamento com dinheiro em espécie. Os pagadores poderão iniciar pagamentos usando chaves ou apelidos para a identificação da conta transacional como o número do telefone celular, o CPF, o CNPJ ou um endereço de e-mail (que devem ser cadastrados no seu banco), por meio de QR Code (estático ou dinâmico) ou com uso da tecnologia NFC (near-field communication) para pagamentos por aproximação.&lt;/p>
&lt;/blockquote>
&lt;p>É importante notarmos esses itens relacionados a como a chave pode ser formada, bem como as informações que são contidas nela. Sua chave PIX, pode ser seu &lt;strong>telefone celular&lt;/strong>, &lt;strong>CPF&lt;/strong>, &lt;strong>CNPJ&lt;/strong>, &lt;strong>endereço de e-mail&lt;/strong> ou uma chave gerada &amp;ldquo;aleatoriamente&amp;rdquo; e vinculada a sua conta.&lt;/p>
&lt;p>Quando alguém realiza uma transferência de valores utilizando o PIX, temos um &lt;code>whois&lt;/code> de quem está por de trás daquela chave, trazendo informações como &lt;strong>nome completo&lt;/strong>, &lt;strong>CPF mascarado&lt;/strong> (na verdade alguns bancos esqueceram dessa parte para clientes da mesma instituição, como sempre, o OSINT agradece, mas acredito que não deveria funcionar dessa forma 👀, ou muitas vezes vazando o número do documento consultando o comprovante de pagamento, que não trazia esse dado para o cliente &lt;em>mobile&lt;/em>) e o &lt;strong>banco do destinatário&lt;/strong>.&lt;/p>
&lt;p>Alguns cenários que podemos mapear fazendo uma análise dessa superfície de ataque, são relativamente pequenos, como encontrar o nome completo de uma pessoa que cadastrou um e-mail como sua chave. Porém para dentro da cena de OSINT, esse é um recurso muito poderoso, especialmente pelas tratativas das famosas pessoas publicamente expostas, já que agora é possível chegar no banco que um político ou milionário guarda sua grana (e também seus &lt;em>offshores&lt;/em>, caso for uma instituição nacional).&lt;/p>
&lt;p>Outro ponto muito interessante que podemos explorar, além de enumerar massivamente chaves PIX, enriquecendo cada vez mais uma lista de e-mails, ou de &lt;em>phishing&lt;/em>, é utilizar-se da função de transferir R$ 0,01 centavos (durante minhas análises, algumas &lt;em>fintechs&lt;/em> me permitiram inclusive adicionar dinheiro que não existia, tipos fortes são seus amigos, não deixe passar &lt;code>float&lt;/code>, &lt;code>double&lt;/code> e &lt;code>decimal&lt;/code> como a mesma coisa em sua &lt;em>stack&lt;/em>), com o bónus de conter uma mensagem com &lt;strong>qualquer conteúdo&lt;/strong>, e bom, isso é perigoso em diversas formas.&lt;/p>
&lt;blockquote>
&lt;p>Isso inclusive virou meme, e graças a esse meme das mensagens cornas via PIX, que surgiu a maliciosidade nos olhos da galera, para montar campanhas de &lt;em>marketing&lt;/em> totalmente direcionadas, pela bagatela de um centavo a mensagem.&lt;/p>
&lt;/blockquote>
&lt;h1 id="o-escolhido-depois-de-uma-longa-análise-de-outros-candidatos">O escolhido (depois de uma longa análise de outros candidatos)&lt;/h1>
&lt;p>Depois de olhar alguns dos principais meios de pagamento que tinham implementado o PIX, acabei por selecionar uma aplicação Android muito bem escrita para utilizar nos testes (principalmente pois já tinha uma conta aberta lá, que nunca utilizei), foi bom para relembrar muita coisa das magias ocultas que um bom framework de instrumentação pode fazer, nesse caso utilizei o vovô XPOSED, e depois acabei migrando para o Frida já que não precisava trocar nada na ROM padrão do AVD.&lt;/p>
&lt;p>Essa aplicação em especial, me chamou bastante atenção na forma que foi implementado os recursos de segurança, mas um pequeno deslize por parte dos desenvolvedores, permitiram que todas as suas funcionalidades fossem facilmente (na verdade eu levei 5 horas olhando SMALI e umas chamadas malucas do JNI) ignoradas por um famoso &lt;code>try {} catch {}&lt;/code> implementado de forma genérica.&lt;/p>
&lt;p>Como já dizia o ditado, de nada adianta pagar milhões para GuardSquare para deixar seus executáveis devidamente ofuscados, sendo que o &amp;ldquo;feijão com arroz&amp;rdquo; do &lt;em>clean code&lt;/em> não é colocado quando a esteira de desenvolvimento ferve. Na verdade encontrei esse mesmo detalhe em outras aplicações nacionais.&lt;/p>
&lt;p>Nessa mesma aplicação, notei também a falta de sanitização dessa mensagem do PIX, e acabei por escrever um fuzzer para tentar pegar alguma coisa na renderização da mensagem, talvez traga esse item em outra postagem. Enfim, continuando a análise, percebi que o &lt;em>bypass&lt;/em> rolou, graças a forma que essas funções de segurança eram implementadas: Havia uma &lt;em>activity&lt;/em> principal, que era executada antes de todas as outras (no começo parecia uma gambiarra, depois parecia que estava no começo), e quando era feito esse &lt;em>handling&lt;/em> dos estados das telas da aplicação, quando essa principal era instanciada, as verificações de segurança, eram realizadas.&lt;/p>
&lt;p>E devido ao &lt;code>try {} catch {}&lt;/code> do código que tentava carregar essa tela de aviso (sabe aquela famosa &amp;ldquo;&lt;em>por motivos de segurança seu dispositivo Android blá blá blá&lt;/em>&amp;quot;), era pulada uma das exceções possíveis, que era justamente o &lt;em>handle&lt;/em> para a entidade que fazia referência para essa &lt;em>activity&lt;/em> na memória ser nula, caiu para dentro do limbo das exceções genéricas, e o código continua sua vida depois daquilo, então foi literalmente algo similar a isso para contornar esses controles de segurança:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">randomSecurity2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Java&lt;/span>.&lt;span style="color:#a6e22e">use&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;???&amp;#39;&lt;/span>);
&lt;span style="color:#a6e22e">randomSecurity2&lt;/span>.&lt;span style="color:#f92672">???&lt;/span>.&lt;span style="color:#a6e22e">implementation&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> () {
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;a ???() called, returning nothing.&amp;#34;&lt;/span>);
}
&lt;span style="color:#a6e22e">randomSecurity2&lt;/span>.&lt;span style="color:#f92672">???&lt;/span>.&lt;span style="color:#a6e22e">implementation&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> () {
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;a ???() called, returning nothing.&amp;#34;&lt;/span>);
}
&lt;span style="color:#75715e">// ??? quer dizer que escondi os nomes para evitar problemas.
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Demorei bastante para chegar aqui, devido a ofuscação de código do DexGuard, quebrar os decompiladores clássicos dos executáveis Dalvik, colocando caracteres unicode no meio do nome da função, classe, propriedade etc, fazendo que o decompilador, ao tentar montar o pseudocódigo Java, à partir do SMALI, caia em um &lt;em>loop&lt;/em> de exceções. Ainda bem que podemos criar padrões de &lt;em>hooking&lt;/em> baseados nas assinaturas de tipo das funções, e também enumerar uma classe por essas mesmas características em seu construtor.&lt;/p>
&lt;p>À partir daqui, foi só programar uma extensão para meu proxy para conseguir enviar as requisições para o servidor de &lt;em>backend&lt;/em> com a mesma chave que o cliente original utilizaria para criptografar as &lt;em>payloads&lt;/em> enviadas. Depois de todo esse trabalho, comecei a automatizar as requisições para conseguir, finalmente, fazer o &lt;em>fingerprint&lt;/em> de chaves PIX, e também zuar alguns amigos com centenas de transações de um centavo com frases aleatórias do Chuck Norris (caso um dia tiver um domingo tedioso, recomendo utilizar &lt;a href="https://api.chucknorris.io/">essa API&lt;/a> para azucrinar uns amigos).&lt;/p>
&lt;h1 id="shellscript-e-jq-para-começar-a-automação">ShellScript e &lt;code>jq&lt;/code> para começar a automação&lt;/h1>
&lt;p>Depois de fazer todas as muambas necessárias para fazer o &lt;em>script&lt;/em> funcionar, temos essa belezura em ação:&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/YdWoOtm.png" alt="PIXMAP funcinando c:">&lt;/p>
&lt;p>E agora era só passar a chave de alguém, e ser feliz:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">➜ automator ./pixmap.sh --key&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;+5511.......&amp;#34;&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>+&lt;span style="color:#f92672">]&lt;/span> Key +5511......., of type PHONE intel:
&amp;gt; ISPB: &lt;span style="color:#ae81ff">18236120&lt;/span>
&amp;gt; Institution: NU PAGAMENTOS S.A.
&amp;gt; Owner: Jonas Uliana
&amp;gt; Owner Type: PERSONAL
&amp;gt; Document: 000........
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Só substitui meus dados por pontos, assim que alguns bancos responderem adequadamente sobre alguns pontos que notei de bem perigoso na arvore de riscos ao analisar o fluxo transacional do PIX, irei também deixar o &lt;em>script&lt;/em>, e uma ferramenta de OSINT (isso é OSINT? Não sei dizer muito bem) decente de fato para azucrinar seus amigos e enriquecer a lista de phishing da empresa.&lt;/p>
&lt;h1 id="minhas-conclusões">Minhas conclusões&lt;/h1>
&lt;p>Ainda está se popularizando, cada vez mais com maior adoções e popularidade, mas te todos os testes que fiz em diferentes meios de pagamentos (incluindo bancos, &lt;em>fintechs&lt;/em> e tudo mais), é visível que existe muita falta de maturidade dos modelos de risco ao lidar com fluxos fraudulentos ou anómalos dentro do PIX.&lt;/p>
&lt;p>Outro ponto que não sei dizer se é um risco, ou uma regra de negócio à ser seguida do BACEN, é a permissão de uma conta poder pesquisar centenas de milhares de outras chaves PIX de uma só vez. Notei que nenhuma instituição tinha implementado controles de &lt;em>rate limiting&lt;/em> ou similares, diretamente em suas APIs. A propósito, foi bem legal notar diversas dessas empresas utilizando GraphQL, eu particularmente prefiro bastante, e acredito que qualquer um que desenvolva &lt;em>frontend&lt;/em> compartilhe desse mesmo sentimento.&lt;/p>
&lt;p>E sobre bloquear o aceite de mensagens no PIX? Bom, acredito que isso pode ser implementado no meio de pagamento, não quero receber mensagens de ameaça/marketing ou nada do tipo, ainda que isso implique em ganhar alguns centavos. Meus amigos que caíram na minha zueira, fizeram 10 reais cada, mas para totalizar essa grana, tomaram 1000 transações PIX com frases do Chuck Norris.&lt;/p></content></item><item><title>Solucionando problemas de sincronismo de requisições em paralelo com SemaphoreSlim</title><link>https://exception.blog/posts/problemas-com-httpclient-resolvidos/</link><pubDate>Wed, 30 Dec 2020 18:21:14 -0300</pubDate><guid>https://exception.blog/posts/problemas-com-httpclient-resolvidos/</guid><description>Dando um push() no problema Um dos desafios que nem com as técnicas mais sombrias de debugging me ajudaram a entender o que meu contexto de requisições HTTP assíncronos e paralelos estavam retornando uma exceção baseada no cancelamento das referências das instâncias dos vários CancellationToken utilizados para construir o cliente das requisições.
Foi uma discussão bem legal com alguns monstros da CLR e até mesmo do Roslyn, que com uma paciência de Jó, conseguiram ir a fundo na explicação sobre o funcionamento da pilha de rede dentro do .</description><content>&lt;h1 id="dando-um-push-no-problema">Dando um &lt;code>push()&lt;/code> no problema&lt;/h1>
&lt;p>Um dos desafios que nem com as técnicas mais sombrias de &lt;em>debugging&lt;/em> me ajudaram a entender o que meu contexto de requisições HTTP assíncronos e paralelos estavam retornando uma exceção baseada no cancelamento das referências das instâncias dos vários &lt;code>CancellationToken&lt;/code> utilizados para construir o cliente das requisições.&lt;/p>
&lt;p>Foi uma discussão bem legal com alguns monstros da CLR e até mesmo do Roslyn, que com uma paciência de Jó, conseguiram ir a fundo na explicação sobre o funcionamento da pilha de rede dentro do .NET, e também, sobre a abstração que estava consumindo. No geral, as diversas &lt;em>tasks&lt;/em> que havia emitido, que foram passadas para serem aguardadas sua execução até o fim como parâmetro da função &lt;code>WhenAll&lt;/code> lá do binário &lt;code>System.Runtime.dll&lt;/code>.&lt;/p>
&lt;blockquote>
&lt;p>Para não descer muito o nível, e deixar tudo de maneira bem entendível, não vou abranger muito a explicação que absorvi, e focar na resolução desse problema relativamente simples.&lt;/p>
&lt;/blockquote>
&lt;h1 id="nem-sempre-é-tudo-uma-questão-de-alto-nível">Nem sempre é tudo uma questão de alto nível&lt;/h1>
&lt;p>Em contextos de paralelismo com tarefas que consomem muito tempo do processador, ainda que existem outras várias camadas para orquestrarem essas tarefas, desde de o próprio CPU até o sistema operacional e a própria &lt;em>stack&lt;/em> de desenvolvimento, cabe a nós implementarmos controles eficazes na orquestração nas nossas próprias tarefas.&lt;/p>
&lt;p>Especialmente nas linguagens de altíssimo nível, que entregam uma abstração &lt;em>muito abstrata - eu ri por dentro aqui -&lt;/em> do que realmente é uma &lt;em>thread&lt;/em>, devemos ter essa atenção dobrada para não cair em um contexto de cancelamento pois o tempo de resposta da aplicação para o ambiente onde foi delegada sua execução chegar ao limite.&lt;/p>
&lt;p>Nesse cenário do &lt;code>HttpClientHandler&lt;/code> e do &lt;code>HttpClient&lt;/code> isso fica mais fácil de se perceber, mesmo que você implemente um &lt;em>timeout&lt;/em> na casa dos &lt;code>TimeSpam.FromDays(666)&lt;/code>, se o tempo de execução de qualquer uma das funções assíncronas do &lt;code>HttpClient&lt;/code>, como a mais utilizada &lt;code>HttpClient.SendAsync(HttpRequestMessage)&lt;/code>, podem retornar um &lt;em>timeout&lt;/em>, mas não da resposta HTTP do servidor, e sim da sua &lt;code>Task&lt;/code> que está no limbo do atual contexto de processamento.&lt;/p>
&lt;blockquote>
&lt;p>Vai por mim, evite utilizar funções que podem receber uma sobrecarga de uma instância de &lt;code>CancellationToken&lt;/code>, se ela pode trabalhar com os &lt;em>status&lt;/em> provenientes dessa estrutura, algum motivo tem.&lt;/p>
&lt;/blockquote>
&lt;p>Para simplificar o entendimento de todo esse cenário intangível, vamos trazer ao código uma péssima prática de programação (que quase me fez desistir do desenvolvimento do &lt;a href="https://github.com/BizarreNULL/httpdoom/">HttpDoom&lt;/a>) relacionada ao paralelismo e assincronicidade de código:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">using&lt;/span> System;
&lt;span style="color:#66d9ef">using&lt;/span> System.Linq;
&lt;span style="color:#66d9ef">using&lt;/span> System.Net.Http;
&lt;span style="color:#66d9ef">using&lt;/span> System.Threading.Tasks;
&lt;span style="color:#66d9ef">namespace&lt;/span> Exception.Examples
{
&lt;span style="color:#66d9ef">internal&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Program&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task Main()
{
&lt;span style="color:#66d9ef">var&lt;/span> tasks = &lt;span style="color:#66d9ef">await&lt;/span> Task.WhenAll(Enumerable.Range(&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">5000&lt;/span>)
.Select(&lt;span style="color:#ae81ff">_&lt;/span> =&amp;gt; &lt;span style="color:#66d9ef">new&lt;/span> HttpClient().GetAsync(&lt;span style="color:#e6db74">&amp;#34;https://google.com&amp;#34;&lt;/span>)));
tasks
.Where(t =&amp;gt; &lt;span style="color:#66d9ef">true&lt;/span>)
.ToList()
.ForEach(r =&amp;gt; Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;Google answered {r.StatusCode}&amp;#34;&lt;/span>));
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;strong>Nota&lt;/strong>: &lt;em>Top-level programs&lt;/em> ainda tem algumas coisas bem peculiares para tratar inferência dinâmica de tipos e de contextos assíncronos e paralelos no C# 9, então vamos no clássico &lt;em>entrypoint program&lt;/em> mesmo.&lt;/p>
&lt;/blockquote>
&lt;p>Um código bem simples, e que - se liga no &lt;em>plot twist&lt;/em> - funciona perfeitamente bem! O motivo de tudo funcionar como deveria, é que temos implementado somente uma única responsabilidade dentro da função paralela e assíncrona, onde é iniciado 5000 &lt;code>Task&amp;lt;HttpResponseMessage&amp;gt;&lt;/code> que será aguardada logo no seu &lt;em>enclosure&lt;/em> que é justamente a própria &lt;code>Task.WhenAll&lt;/code>, por ser uma expressão LINQ, o código pode ser um pouco difícil de ler, mas nada que alguns minutos de leitura não resolva.&lt;/p>
&lt;p>O problema que estamos tentando criar, acontece quando além dessa única coisa que é feita (&lt;code>return new HttpClient().GetAsync(&amp;quot;https://google.com&amp;quot;))&lt;/code>, na expressão anônima da extensão &lt;code>Select()&lt;/code> lá do LINQ), adicionamos alguma função que freia a execução dessa &lt;em>thread&lt;/em>, por exemplo, escrever na tela informações da requisição conforme são executadas, vamos alterar um pouco o código e adicionar algumas funções que fação operações de IO:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#75715e">// ...
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">await&lt;/span> Task.WhenAll(Enumerable.Range(&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">5000&lt;/span>)
.Select(&lt;span style="color:#66d9ef">async&lt;/span> &lt;span style="color:#ae81ff">_&lt;/span> =&amp;gt;
{
&lt;span style="color:#66d9ef">try&lt;/span>
{
&lt;span style="color:#66d9ef">var&lt;/span> response = &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> HttpClient().GetAsync(&lt;span style="color:#e6db74">&amp;#34;https://google.com&amp;#34;&lt;/span>);
Console.Write(&lt;span style="color:#e6db74">$&amp;#34;Remote {response.RequestMessage?.RequestUri} answered {response.StatusCode}, &amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">var&lt;/span> content = &lt;span style="color:#66d9ef">await&lt;/span> response.Content.ReadAsByteArrayAsync();
Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;with a length of {content.Length} byte(s)&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">return&lt;/span> response;
}
&lt;span style="color:#66d9ef">catch&lt;/span> (System.Exception e)
{
Console.WriteLine(e.InnerException != &lt;span style="color:#66d9ef">null&lt;/span>
? &lt;span style="color:#e6db74">$&amp;#34;Error: {e.InnerException.Message}&amp;#34;&lt;/span>
: &lt;span style="color:#e6db74">$&amp;#34;Error: {e.Message}&amp;#34;&lt;/span>);
}
}));
&lt;span style="color:#75715e">// ...
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Nesse cenário como temos a interação com operações que causam problemas na hora de serem executadas, e nem por realizarem operações de IO com &lt;code>response.Content.ReadAsByteArrayAsync()&lt;/code> mas sim pela escrita na tela usando &lt;code>System.Console&lt;/code>, que causa um &lt;em>lock&lt;/em> e vira uma bagunça, quem estiver disponível, executa essa função.&lt;/p>
&lt;p>Quando você executar esse código (além de receber um belíssimo banimento da Google por realizar milhares de requisições em tão pouco tempo), vai se deparar com algumas exceções de &lt;code>Task&lt;/code> ao invés das instâncias de classes referentes a pilha de rede do .NET, no caso a famosa mensagem &amp;ldquo;&lt;em>The operation was canceled&lt;/em>&amp;rdquo;.&lt;/p>
&lt;p>E justamente quando receber essa resposta, é que os problemas do paralelismo começam a perturbar sua sanidade.&lt;/p>
&lt;h1 id="resolvendo-com-uma-boa-sinalização">Resolvendo com uma boa sinalização&lt;/h1>
&lt;p>Existem diversas APIs que são fornecidas dentro do CLR para sanar os problemas de paralelismo que correspondem a estes erros, podemos realizar a implementação mais simples que conheço, que tem pouquíssimas alterações no código fonte original da aplicação, utilizando &lt;code>SemaphoreSlim&lt;/code> para corrigir esse fiasco.&lt;/p>
&lt;p>Podemos resumir esse elemento de &lt;code>System.Threads&lt;/code> como sendo uma entidade responsável por limitar o número de &lt;em>threads&lt;/em> que podem acessar uma &lt;em>pool&lt;/em> de recursos, que é justamente o que causa &amp;ldquo;&lt;em>The operation was canceled&lt;/em>&amp;rdquo; dentro de uma &lt;code>Task&lt;/code>. Sua implementação é bem simples, e ele receber por padrão um único argumento correspondente a quantidade máxima de &lt;em>threads&lt;/em> que podem ser alocadas para acessar estes recursos:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c#" data-lang="c#">&lt;span style="color:#66d9ef">var&lt;/span> semaphore = &lt;span style="color:#66d9ef">new&lt;/span> SemaphoreSlim(Environment.ProcessorCount);
&lt;span style="color:#66d9ef">await&lt;/span> Task.WhenAll(Enumerable.Range(&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">1000&lt;/span>)
.Select(&lt;span style="color:#66d9ef">async&lt;/span> &lt;span style="color:#ae81ff">_&lt;/span> =&amp;gt;
{
&lt;span style="color:#66d9ef">await&lt;/span> semaphore.WaitAsync();
&lt;span style="color:#66d9ef">try&lt;/span>
{
&lt;span style="color:#66d9ef">var&lt;/span> response = &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> HttpClient().GetAsync(&lt;span style="color:#e6db74">&amp;#34;https://zup.com.br&amp;#34;&lt;/span>);
Console.Write(&lt;span style="color:#e6db74">$&amp;#34;Remote {response.RequestMessage?.RequestUri} answered {response.StatusCode}, &amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">var&lt;/span> content = &lt;span style="color:#66d9ef">await&lt;/span> response.Content.ReadAsByteArrayAsync();
Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;with a length of {content.Length} byte(s)&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">return&lt;/span> response;
}
&lt;span style="color:#66d9ef">catch&lt;/span> (System.Exception e)
{
Console.WriteLine(e.InnerException != &lt;span style="color:#66d9ef">null&lt;/span>
? &lt;span style="color:#e6db74">$&amp;#34;Error: {e.InnerException.Message}&amp;#34;&lt;/span>
: &lt;span style="color:#e6db74">$&amp;#34;Error: {e.Message}&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;
}
&lt;span style="color:#66d9ef">finally&lt;/span>
{
semaphore.Release();
}
}));
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Agora além de podermos controlar o número de &lt;em>threads&lt;/em> que serão utilizados para realizar as requisições, também não vamos ter problemas de concorrência ao tentar processar essa &lt;em>pool&lt;/em> de tarefas alocadas no fluxo de execução da aplicação.&lt;/p></content></item><item><title>About</title><link>https://exception.blog/about/</link><pubDate>Wed, 16 Dec 2020 17:52:10 -0300</pubDate><guid>https://exception.blog/about/</guid><description>Olá, como deve ter percebido, sou o Jojo, escrevo neste blog coisas que gosto, focados em segurança da informação, linguagens de programação exotéricas e um pouco de compiladores/interpretadores de linguagens ainda mais estranhas. Todo o conteúdo (e o próprio blog) está disponível nesse repositório esperando seu forks e também pull-requests caso quiser publicar algo, bem como corrigir uma cagada ou outra que escrevo aqui.
Para entrar em contato comigo, é só pegar minha chave no Keybase, e enviar uma mensagem para jonas dot uliana at passwd dotcom dot br (ou preferencialmente por lá mesmo).</description><content>&lt;p>Olá, como deve ter percebido, sou o Jojo, escrevo neste blog coisas que gosto, focados em segurança da informação, linguagens de programação exotéricas e um pouco de compiladores/interpretadores de linguagens ainda mais estranhas. Todo o conteúdo (e o próprio blog) está disponível nesse &lt;a href="https://github.com/BizarreNULL/exception">repositório&lt;/a> esperando seu &lt;em>forks&lt;/em> e também &lt;em>pull-requests&lt;/em> caso quiser publicar algo, bem como corrigir uma cagada ou outra que escrevo aqui.&lt;/p>
&lt;p>Para entrar em contato comigo, é só pegar minha chave no Keybase, e enviar uma mensagem para &lt;em>jonas &lt;code>dot&lt;/code> uliana &lt;code>at&lt;/code> passwd &lt;code>dot&lt;/code>com &lt;code>dot&lt;/code> br&lt;/em> (ou preferencialmente por lá mesmo).&lt;/p>
&lt;blockquote>
&lt;p>The content is aimed at Brazilian Portuguese, but some posts are available in English as well.&lt;/p>
&lt;/blockquote></content></item></channel></rss>